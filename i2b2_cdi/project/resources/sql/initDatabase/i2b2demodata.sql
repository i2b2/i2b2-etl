
/****** Object:  Table [dbo].[ARCHIVE_OBSERVATION_FACT]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ARCHIVE_OBSERVATION_FACT](
	[ENCOUNTER_NUM] [int] NOT NULL,
	[PATIENT_NUM] [int] NOT NULL,
	[CONCEPT_CD] [varchar](50) NOT NULL,
	[PROVIDER_ID] [varchar](50) NOT NULL,
	[START_DATE] [datetime] NOT NULL,
	[MODIFIER_CD] [varchar](100) NOT NULL,
	[INSTANCE_NUM] [int] NOT NULL,
	[VALTYPE_CD] [varchar](50) NULL,
	[TVAL_CHAR] [varchar](255) NULL,
	[NVAL_NUM] [decimal](18, 5) NULL,
	[VALUEFLAG_CD] [varchar](50) NULL,
	[QUANTITY_NUM] [decimal](18, 5) NULL,
	[UNITS_CD] [varchar](50) NULL,
	[END_DATE] [datetime] NULL,
	[LOCATION_CD] [varchar](50) NULL,
	[OBSERVATION_BLOB] [varchar](max) NULL,
	[CONFIDENCE_NUM] [decimal](18, 5) NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
	[TEXT_SEARCH_INDEX] [int] IDENTITY(1,1) NOT NULL,
	[ARCHIVE_UPLOAD_ID] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CODE_LOOKUP]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CODE_LOOKUP](
	[TABLE_CD] [varchar](100) NOT NULL,
	[COLUMN_CD] [varchar](100) NOT NULL,
	[CODE_CD] [varchar](50) NOT NULL,
	[NAME_CHAR] [varchar](650) NULL,
	[LOOKUP_BLOB] [varchar](max) NULL,
	[UPLOAD_DATE] [datetime] NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
 CONSTRAINT [CODE_LOOKUP_PK] PRIMARY KEY CLUSTERED 
(
	[TABLE_CD] ASC,
	[COLUMN_CD] ASC,
	[CODE_CD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CONCEPT_DIMENSION]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CONCEPT_DIMENSION](
	[CONCEPT_PATH] [varchar](700) NOT NULL,
	[CONCEPT_CD] [varchar](50) NULL,
	[NAME_CHAR] [varchar](2000) NULL,
	[CONCEPT_BLOB] [varchar](max) NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
	[CONCEPT_TYPE] [varchar](50) NULL,
	[DEFINITION_TYPE] [varchar](50) NULL,
	[UNIT_CD] [varchar](50) NULL,
	[DESCRIPTION] [varchar](max) NULL,
 CONSTRAINT [CONCEPT_DIMENSION_PK] PRIMARY KEY CLUSTERED 
(
	[CONCEPT_PATH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DATAMART_REPORT]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DATAMART_REPORT](
	[TOTAL_PATIENT] [int] NULL,
	[TOTAL_OBSERVATIONFACT] [int] NULL,
	[TOTAL_EVENT] [int] NULL,
	[REPORT_DATE] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[derived_concept_definition]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[derived_concept_definition](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[concept_path] [varchar](700) NOT NULL,
	[description] [text] NULL,
	[sql_query] [text] NOT NULL,
	[unit_cd] [varchar](50) NULL,
	[update_date] [datetime] NOT NULL,
 CONSTRAINT [PK_DERIVED_CONCEPT_DEFINITION] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[derived_concept_dependency]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[derived_concept_dependency](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[derived_concept_id] [bigint] NOT NULL,
	[parent_concept_path] [varchar](700) NULL,
 CONSTRAINT [PK_DERIVED_CONCEPT_DEPENDENCY] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[derived_concept_job]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[derived_concept_job](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[project_name] [varchar](100) NULL,
	[concept_path] [varchar](700) NULL,
	[error_stack] [text] NULL,
	[derived_concept_script] [text] NOT NULL,
	[status] [varchar](20) NOT NULL,
	[started_on] [datetime] NULL,
	[completed_on] [datetime] NULL,
	[priority] [int] NULL,
	[definition_type] [varchar](20) NULL,
	[job_host] [varchar](100) NULL,
 CONSTRAINT [PK_DERIVED_CONCEPT_JOB] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ENCOUNTER_MAPPING]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ENCOUNTER_MAPPING](
	[ENCOUNTER_IDE] [varchar](200) NOT NULL,
	[ENCOUNTER_IDE_SOURCE] [varchar](50) NOT NULL,
	[PROJECT_ID] [varchar](50) NOT NULL,
	[ENCOUNTER_NUM] [int] NOT NULL,
	[PATIENT_IDE] [varchar](200) NOT NULL,
	[PATIENT_IDE_SOURCE] [varchar](50) NOT NULL,
	[ENCOUNTER_IDE_STATUS] [varchar](50) NULL,
	[UPLOAD_DATE] [datetime] NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
 CONSTRAINT [ENCOUNTER_MAPPING_PK] PRIMARY KEY CLUSTERED 
(
	[ENCOUNTER_IDE] ASC,
	[ENCOUNTER_IDE_SOURCE] ASC,
	[PROJECT_ID] ASC,
	[PATIENT_IDE] ASC,
	[PATIENT_IDE_SOURCE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MODIFIER_DIMENSION]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MODIFIER_DIMENSION](
	[MODIFIER_PATH] [varchar](700) NOT NULL,
	[MODIFIER_CD] [varchar](50) NULL,
	[NAME_CHAR] [varchar](2000) NULL,
	[MODIFIER_BLOB] [varchar](max) NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
 CONSTRAINT [MODIFIER_DIMENSION_PK] PRIMARY KEY CLUSTERED 
(
	[MODIFIER_PATH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OBSERVATION_FACT]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OBSERVATION_FACT](
	[ENCOUNTER_NUM] [int] NOT NULL,
	[PATIENT_NUM] [int] NOT NULL,
	[CONCEPT_CD] [varchar](50) NOT NULL,
	[PROVIDER_ID] [varchar](50) NOT NULL,
	[START_DATE] [datetime] NOT NULL,
	[MODIFIER_CD] [varchar](100) NOT NULL,
	[INSTANCE_NUM] [int] NOT NULL,
	[VALTYPE_CD] [varchar](50) NULL,
	[TVAL_CHAR] [varchar](255) NULL,
	[NVAL_NUM] [decimal](18, 5) NULL,
	[VALUEFLAG_CD] [varchar](50) NULL,
	[QUANTITY_NUM] [decimal](18, 5) NULL,
	[UNITS_CD] [varchar](50) NULL,
	[END_DATE] [datetime] NULL,
	[LOCATION_CD] [varchar](50) NULL,
	[OBSERVATION_BLOB] [varchar](max) NULL,
	[CONFIDENCE_NUM] [decimal](18, 5) NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
	[TEXT_SEARCH_INDEX] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [OF_IDX_ClusteredConcept]    Script Date: 1/21/2022 1:32:33 PM ******/
CREATE CLUSTERED INDEX [OF_IDX_ClusteredConcept] ON [dbo].[OBSERVATION_FACT]
(
	[CONCEPT_CD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PATIENT_DIMENSION]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PATIENT_DIMENSION](
	[PATIENT_NUM] [int] NOT NULL,
	[VITAL_STATUS_CD] [varchar](50) NULL,
	[BIRTH_DATE] [datetime] NULL,
	[DEATH_DATE] [datetime] NULL,
	[SEX_CD] [varchar](50) NULL,
	[AGE_IN_YEARS_NUM] [int] NULL,
	[LANGUAGE_CD] [varchar](50) NULL,
	[RACE_CD] [varchar](50) NULL,
	[MARITAL_STATUS_CD] [varchar](50) NULL,
	[RELIGION_CD] [varchar](50) NULL,
	[ZIP_CD] [varchar](10) NULL,
	[STATECITYZIP_PATH] [varchar](700) NULL,
	[INCOME_CD] [varchar](50) NULL,
	[PATIENT_BLOB] [varchar](max) NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
 CONSTRAINT [PATIENT_DIMENSION_PK] PRIMARY KEY CLUSTERED 
(
	[PATIENT_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PATIENT_MAPPING]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PATIENT_MAPPING](
	[PATIENT_IDE] [varchar](200) NOT NULL,
	[PATIENT_IDE_SOURCE] [varchar](50) NOT NULL,
	[PATIENT_NUM] [int] NOT NULL,
	[PATIENT_IDE_STATUS] [varchar](50) NULL,
	[PROJECT_ID] [varchar](50) NOT NULL,
	[UPLOAD_DATE] [datetime] NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
 CONSTRAINT [PATIENT_MAPPING_PK] PRIMARY KEY CLUSTERED 
(
	[PATIENT_IDE] ASC,
	[PATIENT_IDE_SOURCE] ASC,
	[PROJECT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROVIDER_DIMENSION]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROVIDER_DIMENSION](
	[PROVIDER_ID] [varchar](50) NOT NULL,
	[PROVIDER_PATH] [varchar](700) NOT NULL,
	[NAME_CHAR] [varchar](850) NULL,
	[PROVIDER_BLOB] [varchar](max) NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
 CONSTRAINT [PROVIDER_DIMENSION_PK] PRIMARY KEY CLUSTERED 
(
	[PROVIDER_PATH] ASC,
	[PROVIDER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_ANALYSIS_PLUGIN]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_ANALYSIS_PLUGIN](
	[PLUGIN_ID] [int] NOT NULL,
	[PLUGIN_NAME] [varchar](2000) NULL,
	[DESCRIPTION] [varchar](2000) NULL,
	[VERSION_CD] [varchar](50) NULL,
	[PARAMETER_INFO] [varchar](max) NULL,
	[PARAMETER_INFO_XSD] [varchar](max) NULL,
	[COMMAND_LINE] [varchar](max) NULL,
	[WORKING_FOLDER] [varchar](max) NULL,
	[COMMANDOPTION_CD] [varchar](max) NULL,
	[PLUGIN_ICON] [varchar](max) NULL,
	[STATUS_CD] [varchar](50) NULL,
	[USER_ID] [varchar](50) NULL,
	[GROUP_ID] [varchar](50) NULL,
	[CREATE_DATE] [datetime] NULL,
	[UPDATE_DATE] [datetime] NULL,
 CONSTRAINT [ANALYSIS_PLUGIN_PK] PRIMARY KEY CLUSTERED 
(
	[PLUGIN_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_ANALYSIS_PLUGIN_RESULT_TYPE]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_ANALYSIS_PLUGIN_RESULT_TYPE](
	[PLUGIN_ID] [int] NOT NULL,
	[RESULT_TYPE_ID] [int] NOT NULL,
 CONSTRAINT [ANALYSIS_PLUGIN_RESULT_PK] PRIMARY KEY CLUSTERED 
(
	[PLUGIN_ID] ASC,
	[RESULT_TYPE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_BREAKDOWN_PATH]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_BREAKDOWN_PATH](
	[NAME] [varchar](100) NULL,
	[VALUE] [varchar](2000) NULL,
	[CREATE_DATE] [datetime] NULL,
	[UPDATE_DATE] [datetime] NULL,
	[USER_ID] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_PATIENT_ENC_COLLECTION]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_PATIENT_ENC_COLLECTION](
	[PATIENT_ENC_COLL_ID] [int] IDENTITY(1,1) NOT NULL,
	[RESULT_INSTANCE_ID] [int] NULL,
	[SET_INDEX] [int] NULL,
	[PATIENT_NUM] [int] NULL,
	[ENCOUNTER_NUM] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[PATIENT_ENC_COLL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_PATIENT_SET_COLLECTION]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_PATIENT_SET_COLLECTION](
	[PATIENT_SET_COLL_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[RESULT_INSTANCE_ID] [int] NULL,
	[SET_INDEX] [int] NULL,
	[PATIENT_NUM] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[PATIENT_SET_COLL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_PDO_QUERY_MASTER]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_PDO_QUERY_MASTER](
	[QUERY_MASTER_ID] [int] IDENTITY(1,1) NOT NULL,
	[USER_ID] [varchar](50) NOT NULL,
	[GROUP_ID] [varchar](50) NOT NULL,
	[CREATE_DATE] [datetime] NOT NULL,
	[REQUEST_XML] [varchar](max) NULL,
	[I2B2_REQUEST_XML] [varchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[QUERY_MASTER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_PRIVILEGE]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_PRIVILEGE](
	[PROTECTION_LABEL_CD] [varchar](1500) NOT NULL,
	[DATAPROT_CD] [varchar](1000) NULL,
	[HIVEMGMT_CD] [varchar](1000) NULL,
	[PLUGIN_ID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[PROTECTION_LABEL_CD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_QUERY_INSTANCE]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_QUERY_INSTANCE](
	[QUERY_INSTANCE_ID] [int] IDENTITY(1,1) NOT NULL,
	[QUERY_MASTER_ID] [int] NULL,
	[USER_ID] [varchar](50) NOT NULL,
	[GROUP_ID] [varchar](50) NOT NULL,
	[BATCH_MODE] [varchar](50) NULL,
	[START_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NULL,
	[DELETE_FLAG] [varchar](3) NULL,
	[STATUS_TYPE_ID] [int] NULL,
	[MESSAGE] [varchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[QUERY_INSTANCE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_QUERY_MASTER]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_QUERY_MASTER](
	[QUERY_MASTER_ID] [int] IDENTITY(1,1) NOT NULL,
	[NAME] [varchar](250) NOT NULL,
	[USER_ID] [varchar](50) NOT NULL,
	[GROUP_ID] [varchar](50) NOT NULL,
	[MASTER_TYPE_CD] [varchar](2000) NULL,
	[PLUGIN_ID] [int] NULL,
	[CREATE_DATE] [datetime] NOT NULL,
	[DELETE_DATE] [datetime] NULL,
	[DELETE_FLAG] [varchar](3) NULL,
	[REQUEST_XML] [varchar](max) NULL,
	[GENERATED_SQL] [varchar](max) NULL,
	[I2B2_REQUEST_XML] [varchar](max) NULL,
	[PM_XML] [varchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[QUERY_MASTER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_QUERY_RESULT_INSTANCE]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_QUERY_RESULT_INSTANCE](
	[RESULT_INSTANCE_ID] [int] IDENTITY(1,1) NOT NULL,
	[QUERY_INSTANCE_ID] [int] NULL,
	[RESULT_TYPE_ID] [int] NOT NULL,
	[SET_SIZE] [int] NULL,
	[START_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NULL,
	[STATUS_TYPE_ID] [int] NOT NULL,
	[DELETE_FLAG] [varchar](3) NULL,
	[MESSAGE] [varchar](max) NULL,
	[DESCRIPTION] [varchar](200) NULL,
	[REAL_SET_SIZE] [int] NULL,
	[OBFUSC_METHOD] [varchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[RESULT_INSTANCE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_QUERY_RESULT_TYPE]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_QUERY_RESULT_TYPE](
	[RESULT_TYPE_ID] [int] NOT NULL,
	[NAME] [varchar](100) NULL,
	[DESCRIPTION] [varchar](200) NULL,
	[DISPLAY_TYPE_ID] [nvarchar](500) NULL,
	[VISUAL_ATTRIBUTE_TYPE_ID] [nvarchar](3) NULL,
	[USER_ROLE_CD] [varchar](255) NULL,
	[CLASSNAME] [varchar](200) NULL,
PRIMARY KEY CLUSTERED 
(
	[RESULT_TYPE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_QUERY_STATUS_TYPE]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_QUERY_STATUS_TYPE](
	[STATUS_TYPE_ID] [int] NOT NULL,
	[NAME] [varchar](100) NULL,
	[DESCRIPTION] [varchar](200) NULL,
PRIMARY KEY CLUSTERED 
(
	[STATUS_TYPE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QT_XML_RESULT]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QT_XML_RESULT](
	[XML_RESULT_ID] [int] IDENTITY(1,1) NOT NULL,
	[RESULT_INSTANCE_ID] [int] NULL,
	[XML_VALUE] [varchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[XML_RESULT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SET_TYPE]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_TYPE](
	[ID] [int] NOT NULL,
	[NAME] [varchar](500) NULL,
	[CREATE_DATE] [datetime] NULL,
 CONSTRAINT [PK_ST_ID] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SET_UPLOAD_STATUS]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_UPLOAD_STATUS](
	[UPLOAD_ID] [int] NOT NULL,
	[SET_TYPE_ID] [int] NOT NULL,
	[SOURCE_CD] [varchar](50) NOT NULL,
	[NO_OF_RECORD] [bigint] NULL,
	[LOADED_RECORD] [bigint] NULL,
	[DELETED_RECORD] [bigint] NULL,
	[LOAD_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NULL,
	[LOAD_STATUS] [varchar](100) NULL,
	[MESSAGE] [varchar](max) NULL,
	[INPUT_FILE_NAME] [varchar](max) NULL,
	[LOG_FILE_NAME] [varchar](max) NULL,
	[TRANSFORM_NAME] [varchar](500) NULL,
 CONSTRAINT [PK_UP_UPSTATUS_IDSETTYPEID] PRIMARY KEY CLUSTERED 
(
	[UPLOAD_ID] ASC,
	[SET_TYPE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SOURCE_MASTER]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SOURCE_MASTER](
	[SOURCE_CD] [varchar](50) NOT NULL,
	[DESCRIPTION] [varchar](300) NULL,
	[CREATE_DATE] [datetime] NULL,
 CONSTRAINT [PK_SOURCEMASTER_SOURCECD] PRIMARY KEY CLUSTERED 
(
	[SOURCE_CD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UPLOAD_STATUS]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UPLOAD_STATUS](
	[UPLOAD_ID] [int] IDENTITY(1,1) NOT NULL,
	[UPLOAD_LABEL] [varchar](500) NOT NULL,
	[USER_ID] [varchar](100) NOT NULL,
	[SOURCE_CD] [varchar](50) NOT NULL,
	[NO_OF_RECORD] [bigint] NULL,
	[LOADED_RECORD] [bigint] NULL,
	[DELETED_RECORD] [bigint] NULL,
	[LOAD_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NULL,
	[LOAD_STATUS] [varchar](100) NULL,
	[MESSAGE] [varchar](max) NULL,
	[INPUT_FILE_NAME] [varchar](max) NULL,
	[LOG_FILE_NAME] [varchar](max) NULL,
	[TRANSFORM_NAME] [varchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VISIT_DIMENSION]    Script Date: 1/21/2022 1:32:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VISIT_DIMENSION](
	[ENCOUNTER_NUM] [int] NOT NULL,
	[PATIENT_NUM] [int] NOT NULL,
	[ACTIVE_STATUS_CD] [varchar](50) NULL,
	[START_DATE] [datetime] NULL,
	[END_DATE] [datetime] NULL,
	[INOUT_CD] [varchar](50) NULL,
	[LOCATION_CD] [varchar](50) NULL,
	[LOCATION_PATH] [varchar](900) NULL,
	[LENGTH_OF_STAY] [int] NULL,
	[VISIT_BLOB] [varchar](max) NULL,
	[UPDATE_DATE] [datetime] NULL,
	[DOWNLOAD_DATE] [datetime] NULL,
	[IMPORT_DATE] [datetime] NULL,
	[SOURCESYSTEM_CD] [varchar](50) NULL,
	[UPLOAD_ID] [int] NULL,
 CONSTRAINT [VISIT_DIMENSION_PK] PRIMARY KEY CLUSTERED 
(
	[ENCOUNTER_NUM] ASC,
	[PATIENT_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [PK_ARCHIVE_OBSFACT]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PK_ARCHIVE_OBSFACT] ON [dbo].[ARCHIVE_OBSERVATION_FACT]
(
	[ENCOUNTER_NUM] ASC,
	[PATIENT_NUM] ASC,
	[CONCEPT_CD] ASC,
	[PROVIDER_ID] ASC,
	[START_DATE] ASC,
	[MODIFIER_CD] ASC,
	[ARCHIVE_UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [CL_IDX_NAME_CHAR]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [CL_IDX_NAME_CHAR] ON [dbo].[CODE_LOOKUP]
(
	[NAME_CHAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [CL_IDX_UPLOADID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [CL_IDX_UPLOADID] ON [dbo].[CODE_LOOKUP]
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [CD_IDX_UPLOADID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [CD_IDX_UPLOADID] ON [dbo].[CONCEPT_DIMENSION]
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [uk_concept_path]    Script Date: 1/21/2022 1:32:37 PM ******/
ALTER TABLE [dbo].[derived_concept_definition] ADD  CONSTRAINT [uk_concept_path] UNIQUE NONCLUSTERED 
(
	[concept_path] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [EM_ENCNUM_IDX]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [EM_ENCNUM_IDX] ON [dbo].[ENCOUNTER_MAPPING]
(
	[ENCOUNTER_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [EM_IDX_ENCPATH]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [EM_IDX_ENCPATH] ON [dbo].[ENCOUNTER_MAPPING]
(
	[ENCOUNTER_IDE] ASC,
	[ENCOUNTER_IDE_SOURCE] ASC,
	[PATIENT_IDE] ASC,
	[PATIENT_IDE_SOURCE] ASC,
	[ENCOUNTER_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [EM_IDX_UPLOADID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [EM_IDX_UPLOADID] ON [dbo].[ENCOUNTER_MAPPING]
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [MD_IDX_UPLOADID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [MD_IDX_UPLOADID] ON [dbo].[MODIFIER_DIMENSION]
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [OBSERVATION_FACT_PK]    Script Date: 1/21/2022 1:32:37 PM ******/
ALTER TABLE [dbo].[OBSERVATION_FACT] ADD  CONSTRAINT [OBSERVATION_FACT_PK] PRIMARY KEY NONCLUSTERED 
(
	[PATIENT_NUM] ASC,
	[CONCEPT_CD] ASC,
	[MODIFIER_CD] ASC,
	[START_DATE] ASC,
	[ENCOUNTER_NUM] ASC,
	[INSTANCE_NUM] ASC,
	[PROVIDER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [OF_IDX_ALLObservation_Fact]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [OF_IDX_ALLObservation_Fact] ON [dbo].[OBSERVATION_FACT]
(
	[PATIENT_NUM] ASC,
	[ENCOUNTER_NUM] ASC,
	[CONCEPT_CD] ASC,
	[START_DATE] ASC,
	[PROVIDER_ID] ASC,
	[MODIFIER_CD] ASC,
	[INSTANCE_NUM] ASC,
	[VALTYPE_CD] ASC,
	[TVAL_CHAR] ASC,
	[NVAL_NUM] ASC,
	[VALUEFLAG_CD] ASC,
	[QUANTITY_NUM] ASC,
	[UNITS_CD] ASC,
	[END_DATE] ASC,
	[LOCATION_CD] ASC,
	[CONFIDENCE_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [OF_IDX_Encounter_Patient]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [OF_IDX_Encounter_Patient] ON [dbo].[OBSERVATION_FACT]
(
	[ENCOUNTER_NUM] ASC,
	[PATIENT_NUM] ASC,
	[INSTANCE_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [OF_IDX_Modifier]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [OF_IDX_Modifier] ON [dbo].[OBSERVATION_FACT]
(
	[MODIFIER_CD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [OF_IDX_SOURCESYSTEM_CD]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [OF_IDX_SOURCESYSTEM_CD] ON [dbo].[OBSERVATION_FACT]
(
	[SOURCESYSTEM_CD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [OF_IDX_Start_Date]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [OF_IDX_Start_Date] ON [dbo].[OBSERVATION_FACT]
(
	[START_DATE] ASC,
	[PATIENT_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [OF_IDX_UPLOADID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [OF_IDX_UPLOADID] ON [dbo].[OBSERVATION_FACT]
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [OF_TEXT_SEARCH_UNIQUE]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [OF_TEXT_SEARCH_UNIQUE] ON [dbo].[OBSERVATION_FACT]
(
	[TEXT_SEARCH_INDEX] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [PA_IDX_UPLOADID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PA_IDX_UPLOADID] ON [dbo].[PATIENT_DIMENSION]
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [PD_IDX_AllPatientDim]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PD_IDX_AllPatientDim] ON [dbo].[PATIENT_DIMENSION]
(
	[PATIENT_NUM] ASC,
	[VITAL_STATUS_CD] ASC,
	[BIRTH_DATE] ASC,
	[DEATH_DATE] ASC,
	[SEX_CD] ASC,
	[AGE_IN_YEARS_NUM] ASC,
	[LANGUAGE_CD] ASC,
	[RACE_CD] ASC,
	[MARITAL_STATUS_CD] ASC,
	[INCOME_CD] ASC,
	[RELIGION_CD] ASC,
	[ZIP_CD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [PD_IDX_DATES]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PD_IDX_DATES] ON [dbo].[PATIENT_DIMENSION]
(
	[PATIENT_NUM] ASC,
	[VITAL_STATUS_CD] ASC,
	[BIRTH_DATE] ASC,
	[DEATH_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [PD_IDX_StateCityZip]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PD_IDX_StateCityZip] ON [dbo].[PATIENT_DIMENSION]
(
	[STATECITYZIP_PATH] ASC,
	[PATIENT_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [PM_ENCPNUM_IDX]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PM_ENCPNUM_IDX] ON [dbo].[PATIENT_MAPPING]
(
	[PATIENT_IDE] ASC,
	[PATIENT_IDE_SOURCE] ASC,
	[PATIENT_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [PM_IDX_UPLOADID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PM_IDX_UPLOADID] ON [dbo].[PATIENT_MAPPING]
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [PM_PATNUM_IDX]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PM_PATNUM_IDX] ON [dbo].[PATIENT_MAPPING]
(
	[PATIENT_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [PD_IDX_NAME_CHAR]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PD_IDX_NAME_CHAR] ON [dbo].[PROVIDER_DIMENSION]
(
	[PROVIDER_ID] ASC,
	[NAME_CHAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [PD_IDX_UPLOADID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [PD_IDX_UPLOADID] ON [dbo].[PROVIDER_DIMENSION]
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [QT_APNAMEVERGRP_IDX]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [QT_APNAMEVERGRP_IDX] ON [dbo].[QT_ANALYSIS_PLUGIN]
(
	[PLUGIN_NAME] ASC,
	[VERSION_CD] ASC,
	[GROUP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [QT_IDX_QPSC_RIID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [QT_IDX_QPSC_RIID] ON [dbo].[QT_PATIENT_SET_COLLECTION]
(
	[RESULT_INSTANCE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [QT_IDX_PQM_UGID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [QT_IDX_PQM_UGID] ON [dbo].[QT_PDO_QUERY_MASTER]
(
	[USER_ID] ASC,
	[GROUP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [QT_IDX_QI_MSTARTID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [QT_IDX_QI_MSTARTID] ON [dbo].[QT_QUERY_INSTANCE]
(
	[QUERY_MASTER_ID] ASC,
	[START_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [QT_IDX_QI_UGID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [QT_IDX_QI_UGID] ON [dbo].[QT_QUERY_INSTANCE]
(
	[USER_ID] ASC,
	[GROUP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [QT_IDX_QM_UGID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [QT_IDX_QM_UGID] ON [dbo].[QT_QUERY_MASTER]
(
	[USER_ID] ASC,
	[GROUP_ID] ASC,
	[MASTER_TYPE_CD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [VD_IDX_AllVisitDim]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [VD_IDX_AllVisitDim] ON [dbo].[VISIT_DIMENSION]
(
	[ENCOUNTER_NUM] ASC,
	[PATIENT_NUM] ASC,
	[INOUT_CD] ASC,
	[LOCATION_CD] ASC,
	[START_DATE] ASC,
	[LENGTH_OF_STAY] ASC,
	[END_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [VD_IDX_DATES]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [VD_IDX_DATES] ON [dbo].[VISIT_DIMENSION]
(
	[ENCOUNTER_NUM] ASC,
	[START_DATE] ASC,
	[END_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [VD_IDX_UPLOADID]    Script Date: 1/21/2022 1:32:37 PM ******/
CREATE NONCLUSTERED INDEX [VD_IDX_UPLOADID] ON [dbo].[VISIT_DIMENSION]
(
	[UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[OBSERVATION_FACT] ADD  DEFAULT ('@') FOR [MODIFIER_CD]
GO
ALTER TABLE [dbo].[OBSERVATION_FACT] ADD  DEFAULT ((1)) FOR [INSTANCE_NUM]
GO
ALTER TABLE [dbo].[derived_concept_dependency]  WITH CHECK ADD  CONSTRAINT [fk_derived_concept_id_dependency] FOREIGN KEY([derived_concept_id])
REFERENCES [dbo].[derived_concept_definition] ([id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[derived_concept_dependency] CHECK CONSTRAINT [fk_derived_concept_id_dependency]
GO
ALTER TABLE [dbo].[derived_concept_dependency]  WITH CHECK ADD  CONSTRAINT [fk_parent_concept_path] FOREIGN KEY([parent_concept_path])
REFERENCES [dbo].[CONCEPT_DIMENSION] ([CONCEPT_PATH])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[derived_concept_dependency] CHECK CONSTRAINT [fk_parent_concept_path]
GO
ALTER TABLE [dbo].[QT_PATIENT_ENC_COLLECTION]  WITH CHECK ADD  CONSTRAINT [QT_FK_PESC_RI] FOREIGN KEY([RESULT_INSTANCE_ID])
REFERENCES [dbo].[QT_QUERY_RESULT_INSTANCE] ([RESULT_INSTANCE_ID])
GO
ALTER TABLE [dbo].[QT_PATIENT_ENC_COLLECTION] CHECK CONSTRAINT [QT_FK_PESC_RI]
GO
ALTER TABLE [dbo].[QT_PATIENT_SET_COLLECTION]  WITH CHECK ADD  CONSTRAINT [QT_FK_PSC_RI] FOREIGN KEY([RESULT_INSTANCE_ID])
REFERENCES [dbo].[QT_QUERY_RESULT_INSTANCE] ([RESULT_INSTANCE_ID])
GO
ALTER TABLE [dbo].[QT_PATIENT_SET_COLLECTION] CHECK CONSTRAINT [QT_FK_PSC_RI]
GO
ALTER TABLE [dbo].[QT_QUERY_INSTANCE]  WITH CHECK ADD  CONSTRAINT [QT_FK_QI_MID] FOREIGN KEY([QUERY_MASTER_ID])
REFERENCES [dbo].[QT_QUERY_MASTER] ([QUERY_MASTER_ID])
GO
ALTER TABLE [dbo].[QT_QUERY_INSTANCE] CHECK CONSTRAINT [QT_FK_QI_MID]
GO
ALTER TABLE [dbo].[QT_QUERY_INSTANCE]  WITH CHECK ADD  CONSTRAINT [QT_FK_QI_STID] FOREIGN KEY([STATUS_TYPE_ID])
REFERENCES [dbo].[QT_QUERY_STATUS_TYPE] ([STATUS_TYPE_ID])
GO
ALTER TABLE [dbo].[QT_QUERY_INSTANCE] CHECK CONSTRAINT [QT_FK_QI_STID]
GO
ALTER TABLE [dbo].[QT_QUERY_RESULT_INSTANCE]  WITH CHECK ADD  CONSTRAINT [QT_FK_QRI_RID] FOREIGN KEY([QUERY_INSTANCE_ID])
REFERENCES [dbo].[QT_QUERY_INSTANCE] ([QUERY_INSTANCE_ID])
GO
ALTER TABLE [dbo].[QT_QUERY_RESULT_INSTANCE] CHECK CONSTRAINT [QT_FK_QRI_RID]
GO
ALTER TABLE [dbo].[QT_QUERY_RESULT_INSTANCE]  WITH CHECK ADD  CONSTRAINT [QT_FK_QRI_RTID] FOREIGN KEY([RESULT_TYPE_ID])
REFERENCES [dbo].[QT_QUERY_RESULT_TYPE] ([RESULT_TYPE_ID])
GO
ALTER TABLE [dbo].[QT_QUERY_RESULT_INSTANCE] CHECK CONSTRAINT [QT_FK_QRI_RTID]
GO
ALTER TABLE [dbo].[QT_QUERY_RESULT_INSTANCE]  WITH CHECK ADD  CONSTRAINT [QT_FK_QRI_STID] FOREIGN KEY([STATUS_TYPE_ID])
REFERENCES [dbo].[QT_QUERY_STATUS_TYPE] ([STATUS_TYPE_ID])
GO
ALTER TABLE [dbo].[QT_QUERY_RESULT_INSTANCE] CHECK CONSTRAINT [QT_FK_QRI_STID]
GO
ALTER TABLE [dbo].[QT_XML_RESULT]  WITH CHECK ADD  CONSTRAINT [QT_FK_XMLR_RIID] FOREIGN KEY([RESULT_INSTANCE_ID])
REFERENCES [dbo].[QT_QUERY_RESULT_INSTANCE] ([RESULT_INSTANCE_ID])
GO
ALTER TABLE [dbo].[QT_XML_RESULT] CHECK CONSTRAINT [QT_FK_XMLR_RIID]
GO
ALTER TABLE [dbo].[SET_UPLOAD_STATUS]  WITH CHECK ADD  CONSTRAINT [FK_UP_SET_TYPE_ID] FOREIGN KEY([SET_TYPE_ID])
REFERENCES [dbo].[SET_TYPE] ([ID])
GO
ALTER TABLE [dbo].[SET_UPLOAD_STATUS] CHECK CONSTRAINT [FK_UP_SET_TYPE_ID]
GO
/****** Object:  StoredProcedure [dbo].[CREATE_TEMP_CONCEPT_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create 
PROCEDURE [dbo].[CREATE_TEMP_CONCEPT_TABLE] (@tempConceptTableName VARCHAR(500), @errorMsg varchar(max) = NULL OUTPUT) 
as

BEGIN 
declare @exec_str nvarchar(MAX);

BEGIN TRY
BEGIN TRANSACTION
print @tempConceptTableName

set @exec_str = ' create table '  + @tempConceptTableName  +' (
    CONCEPT_CD VARCHAR(50) NOT NULL , 
	CONCEPT_PATH VARCHAR(700) NOT NULL , 
	NAME_CHAR VARCHAR(2000), 
	CONCEPT_BLOB VARCHAR(MAX), 
	UPDATE_DATE datetime, 
	DOWNLOAD_DATE DATEtime, 
	IMPORT_DATE DATEtime, 
	SOURCESYSTEM_CD VARCHAR(50)
	 )';


exec sp_executesql  @exec_str; 

set  @exec_str = 'CREATE INDEX idx_' + @tempConceptTableName + '_pat_id ON ' 
      +  @tempConceptTableName + '  (CONCEPT_PATH)';

exec sp_executesql  @exec_str;

print @tempConceptTableName

  COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1);
 END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[CREATE_TEMP_EID_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create 
PROCEDURE [dbo].[CREATE_TEMP_EID_TABLE](@tempEnconterMappingTableName  VARCHAR(500),
   @errorMsg varchar(max)  = NULL OUTPUT) 
AS 

BEGIN 
declare @createSql nvarchar(MAX), @createIndexSql nvarchar(MAX);
BEGIN TRY
BEGIN TRANSACTION
set @createSql = 'create table ' +  @tempEnconterMappingTableName + ' (
	ENCOUNTER_MAP_ID       	VARCHAR(200) NOT NULL,
    ENCOUNTER_MAP_ID_SOURCE	VARCHAR(50) NOT NULL,
    PATIENT_MAP_ID          VARCHAR(200), 
	PATIENT_MAP_ID_SOURCE   VARCHAR(50), 
    ENCOUNTER_ID       	    VARCHAR(200) NOT NULL,
    ENCOUNTER_ID_SOURCE     VARCHAR(50) ,
    ENCOUNTER_NUM           INT, 
    ENCOUNTER_MAP_ID_STATUS    VARCHAR(50),
    PROCESS_STATUS_FLAG     CHAR(1),
	UPDATE_DATE DATETIME, 
	DOWNLOAD_DATE DATETIME, 
	IMPORT_DATE DATETIME, 
	SOURCESYSTEM_CD VARCHAR(50)
)';

exec sp_executesql @createSql; 

set @createIndexSql =  'CREATE INDEX idx_' + @tempEnconterMappingTableName + '_eid_id ON ' + @tempEnconterMappingTableName + '  (  ENCOUNTER_ID, ENCOUNTER_ID_SOURCE,ENCOUNTER_MAP_ID, ENCOUNTER_MAP_ID_SOURCE,ENCOUNTER_NUM   )';
exec sp_executesql @createIndexSql;

set @createIndexSql =  'CREATE CLUSTERED INDEX idx_' + @tempEnconterMappingTableName + '_stateid_id ON ' + @tempEnconterMappingTableName + '  ( PROCESS_STATUS_FLAG)';
exec sp_executesql @createIndexSql;

 COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH
END;
GO
/****** Object:  StoredProcedure [dbo].[CREATE_TEMP_MODIFIER_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create 
PROCEDURE [dbo].[CREATE_TEMP_MODIFIER_TABLE] (@tempModifierTableName VARCHAR(500), @errorMsg varchar(max) = NULL OUTPUT) 
as

BEGIN 
declare @exec_str nvarchar(MAX);

BEGIN TRY
BEGIN TRANSACTION
print @tempModifierTableName

set @exec_str = ' create table '  + @tempModifierTableName  +' (
        MODIFIER_CD VARCHAR(50) NOT NULL , 
	MODIFIER_PATH VARCHAR(700) NOT NULL , 
	NAME_CHAR VARCHAR(2000), 
	MODIFIER_BLOB VARCHAR(MAX), 
	UPDATE_DATE datetime, 
	DOWNLOAD_DATE DATEtime, 
	IMPORT_DATE DATEtime, 
	SOURCESYSTEM_CD VARCHAR(50)
	 )';


exec sp_executesql  @exec_str; 

set  @exec_str = 'CREATE INDEX idx_' + @tempModifierTableName + '_pat_id ON ' 
      +  @tempModifierTableName + '  (MODIFIER_PATH)';

exec sp_executesql  @exec_str;

print @tempModifierTableName

  COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1);
 END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[CREATE_TEMP_PATIENT_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create 
PROCEDURE [dbo].[CREATE_TEMP_PATIENT_TABLE](@tempPatientDimensionTableName  VARCHAR(500),
   @errorMsg varchar(max) = NULL OUTPUT) 
AS 

BEGIN 
    declare @createSql  nvarchar(MAX);

BEGIN TRY
BEGIN TRANSACTION
	-- Create temp table to store encounter/visit information
	set @createSql =  'create table ' +  @tempPatientDimensionTableName + ' (
		PATIENT_ID VARCHAR(200), 
		PATIENT_ID_SOURCE VARCHAR(50),
		PATIENT_NUM INT,
	    VITAL_STATUS_CD VARCHAR(50), 
	    BIRTH_DATE DATETIME, 
	    DEATH_DATE DATETIME, 
	    SEX_CD VARCHAR(50), 
	    AGE_IN_YEARS_NUM INT, 
	    LANGUAGE_CD VARCHAR(50), 
		RACE_CD VARCHAR(50), 
		MARITAL_STATUS_CD VARCHAR(50), 
		RELIGION_CD VARCHAR(50), 
		ZIP_CD VARCHAR(10), 
		STATECITYZIP_PATH VARCHAR(700), 
		PATIENT_BLOB VARCHAR(MAX), 
		UPDATE_DATE DATETIME, 
		DOWNLOAD_DATE DATETIME, 
		IMPORT_DATE DATETIME, 
		SOURCESYSTEM_CD VARCHAR(50)
	)';


 exec sp_executesql  @createSql; 

set  @createSql  = 'CREATE INDEX idx_' + @tempPatientDimensionTableName + '_pat_id ON ' 
      +  @tempPatientDimensionTableName + '  (PATIENT_ID,PATIENT_ID_SOURCE,PATIENT_NUM)';

exec sp_executesql  @createSql; 
COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH
END;
GO
/****** Object:  StoredProcedure [dbo].[CREATE_TEMP_PID_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create 
PROCEDURE [dbo].[CREATE_TEMP_PID_TABLE](@tempPatientMappingTableName  VARCHAR(500), @errorMsg varchar(max)  = NULL OUTPUT) 
AS 

BEGIN 
declare @createSql nvarchar(MAX), @createIndexSql nvarchar(MAX);
BEGIN TRY
BEGIN TRANSACTION
set @createSql =  'create table ' +  @tempPatientMappingTableName + ' (
	    PATIENT_MAP_ID VARCHAR(200), 
		PATIENT_MAP_ID_SOURCE VARCHAR(50), 
		PATIENT_ID_STATUS VARCHAR(50), 
		PATIENT_ID  VARCHAR(200),
	    PATIENT_ID_SOURCE varchar(50),
		PATIENT_NUM INT, 
        PATIENT_MAP_ID_STATUS VARCHAR(50),
		PROCESS_STATUS_FLAG CHAR(1), 
		UPDATE_DATE DATETIME, 
		DOWNLOAD_DATE DATETIME, 
		IMPORT_DATE DATETIME, 
		SOURCESYSTEM_CD VARCHAR(50)
	 )';
exec sp_executesql @createSql; 

set @createIndexSql =  'CREATE INDEX idx_' + @tempPatientMappingTableName + '_pid_id ON ' + @tempPatientMappingTableName + '  ( PATIENT_ID, PATIENT_ID_SOURCE )';
exec sp_executesql @createIndexSql;

set @createIndexSql =  'CREATE INDEX idx_' + @tempPatientMappingTableName + 'map_pid_id ON ' + @tempPatientMappingTableName + '  ( PATIENT_ID,PATIENT_ID_SOURCE,PATIENT_MAP_ID, PATIENT_MAP_ID_SOURCE,PATIENT_NUM )';
exec sp_executesql @createIndexSql;


set @createIndexSql =  'CREATE CLUSTERED INDEX idx_' + @tempPatientMappingTableName + 'stat_pid_id ON ' + @tempPatientMappingTableName + '  ( process_status_flag )';
exec sp_executesql @createIndexSql;
COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH
END;
GO
/****** Object:  StoredProcedure [dbo].[CREATE_TEMP_PROVIDER_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[CREATE_TEMP_PROVIDER_TABLE](@tempProviderTableName  VARCHAR(500),
    @errorMsg varchar(max)  = NULL OUTPUT) 
AS 

BEGIN 
 declare @createSql nvarchar(MAX);
BEGIN TRY
BEGIN TRANSACTION
set @createSql =  'create table ' +  @tempProviderTableName + ' (
  PROVIDER_ID VARCHAR(50) NOT NULL, 
	PROVIDER_PATH VARCHAR(700) NOT NULL, 
	NAME_CHAR VARCHAR(2000), 
	PROVIDER_BLOB VARCHAR(MAX), 
	UPDATE_DATE DATETIME, 
	DOWNLOAD_DATE DATETIME, 
	IMPORT_DATE DATETIME, 
	SOURCESYSTEM_CD VARCHAR(50), 
	UPLOAD_ID INT
)';
exec  sp_executesql @createSql;

set @createSql =  'CREATE INDEX idx_' + @tempProviderTableName + '_ppath_id ON ' + @tempProviderTableName + '  (PROVIDER_PATH)';

exec  sp_executesql @createSql;

COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH
END;
GO
/****** Object:  StoredProcedure [dbo].[CREATE_TEMP_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  PROCEDURE [dbo].[CREATE_TEMP_TABLE](@tempTableName  VARCHAR(500), @errorMsg varchar(max)  = NULL OUTPUT) 
AS 

BEGIN 
  declare @createSql nvarchar(MAX),@createIndexSql nvarchar(MAX);
 BEGIN TRY
BEGIN TRANSACTION
	set @createSql = 'create table '+ @tempTableName +'  (
		encounter_num  INT,
		encounter_id varchar(200) not null, 
        encounter_id_source varchar(50) not null,
		concept_cd 	 VARCHAR(50) not null, 
        patient_num INT, 
		patient_id  varchar(200) not null,
        patient_id_source  varchar(50) not null,
	    Provider_Id    	varchar(50) NOT NULL,
	    Start_Date     	datetime NOT NULL,
	    Modifier_Cd    	varchar(100) NOT NULL,
		instance_num    int,
	    ValType_Cd     	varchar(50) NULL,
	   TVal_Char      	varchar(255) NULL,
	   NVal_Num       	decimal(18,5) NULL,
	   ValueFlag_Cd   	varchar(50) NULL,
	   Quantity_Num   	decimal(18,5) NULL,
	   Units_Cd       	varchar(50) NULL,
	   End_Date       	datetime NULL,
	   Location_Cd    	varchar(50) NULL,
	   Observation_Blob VARCHAR(MAX) NULL,
	   Confidence_Num 	decimal(18,5) NULL,
 	   update_date  DATETIME,
	   download_date DATETIME,
 	   import_date DATETIME,
	   sourcesystem_cd VARCHAR(50),
 	   upload_id INT
	)';

  exec  sp_executesql @createSql;


   
   set @createIndexSql =  'CREATE INDEX idx_' + @tempTableName + '_pk ON ' + @tempTableName + '  ( encounter_num,patient_num,concept_cd,provider_id,start_date,modifier_cd,instance_num )';
   exec  sp_executesql @createIndexSql;
   
    set @createIndexSql =  'CREATE INDEX idx_' + @tempTableName + '_enc_pat_id ON ' + @tempTableName + '  (encounter_id,encounter_id_source, patient_id,patient_id_source )';
       exec  sp_executesql @createIndexSql;
COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH    
END;
GO
/****** Object:  StoredProcedure [dbo].[CREATE_TEMP_VISIT_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  PROCEDURE [dbo].[CREATE_TEMP_VISIT_TABLE](@tempTableName  VARCHAR(500), @errorMsg varchar(max) = NULL OUTPUT) 
AS 

BEGIN 
  declare @createSql nvarchar(MAX),@createIndexSql nvarchar(MAX);
  
 BEGIN TRY
BEGIN TRANSACTION
	-- Create temp table to store encounter/visit information
	set @createSql =  'create table ' +  @tempTableName + ' (
		encounter_id 			VARCHAR(200) not null,
		encounter_id_source 	VARCHAR(50) not null, 
		patient_id  			VARCHAR(200) not null,
		patient_id_source 		VARCHAR(50) not null,
		encounter_num	 		    INT, 
		inout_cd   			VARCHAR(50),
		location_cd 			VARCHAR(50),
		location_path 			VARCHAR(900),
 		start_date   			DATETIME, 
 		end_date    			DATETIME,
 		visit_blob 				VARCHAR(MAX),
 		update_date  			DATETIME,
		download_date 			DATETIME,
 		import_date 			DATETIME,
		sourcesystem_cd 		VARCHAR(50)
	)';

	exec sp_executesql @createSql;
	
    set @createIndexSql = 'CREATE INDEX idx_' + @tempTableName + '_enc_id ON ' + @tempTableName + '  (  encounter_id,encounter_id_source,patient_id,patient_id_source )';
    
    exec sp_executesql @createIndexSql;
    
    set @createIndexSql =  'CREATE INDEX idx_' + @tempTableName + '_patient_id ON ' + @tempTableName + '  ( patient_id,patient_id_source )';
    exec sp_executesql @createIndexSql;
    
COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH
END;
GO
/****** Object:  StoredProcedure [dbo].[INSERT_CONCEPT_FROMTEMP]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create   PROCEDURE  [dbo].[INSERT_CONCEPT_FROMTEMP] (@tempConceptTableName VARCHAR(500), @upload_id int,
@errorMsg VARCHAR(MAX) = NULL OUTPUT) 
AS 

BEGIN 
 declare @deleteDuplicateSql nvarchar(max);
 declare @insertSql nvarchar(max);
 declare @updateSql nvarchar(max);
BEGIN TRY
  BEGIN TRANSACTION
	--Delete duplicate rows with same encounter and patient combination

	set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY concept_path,concept_cd ORDER BY concept_path,concept_cd ) AS RNUM FROM ' + @tempConceptTableName +') 
delete  from deleteTempDup where rnum>1';
	exec sp_executesql @deleteDuplicateSql;




set @updateSql = ' UPDATE concept_dimension  set 
			 		name_char= temp.name_char,
                    concept_blob= temp.concept_blob,
                    update_date= temp.update_date,
                    import_date = getdate(),
                    DOWNLOAD_DATE=temp.DOWNLOAD_DATE,
					SOURCESYSTEM_CD=temp.SOURCESYSTEM_CD,
					UPLOAD_ID = '+ convert(nvarchar,@upload_id)+ '
					from concept_dimension cd 
                    inner join ' + @tempConceptTableName + ' temp
                    on  cd.concept_path = temp.concept_path
                    where temp.update_date >= cd.update_date';

      exec sp_executesql @updateSql;
   
  
	set @insertSql = 'insert into concept_dimension(concept_cd,concept_path,name_char,concept_blob, ' + 
                     ' update_date,download_date,import_date,sourcesystem_cd,upload_id)  ' + 
			         ' select  concept_cd, concept_path,name_char,concept_blob, update_date,download_date, ' + 
                        ' getdate(),sourcesystem_cd,'+ convert(nvarchar,@upload_id) + ' from  ' + @tempConceptTableName +  ' temp ' +
					' where not exists (select concept_cd from concept_dimension cd where ' + 
				    ' cd.concept_path = temp.concept_path) ';

    exec sp_executesql @insertSql;
   COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg; 
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH

END;
 
 



GO
/****** Object:  StoredProcedure [dbo].[INSERT_EID_MAP_FROMTEMP]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[INSERT_EID_MAP_FROMTEMP] (@tempEidTableName VARCHAR(500),  @upload_id INT,
@errorMsg VARCHAR(MAX) = NULL OUTPUT) 
AS
BEGIN
 declare @existingEncounterNum varchar(32);
 declare  @maxEncounterNum int;
 declare @deleteDuplicateSql nvarchar(MAX);

declare  @sql_stmt  nvarchar(MAX);
 
declare  @disEncounterId varchar(200); 
declare  @disEncounterIdSource varchar(50);
declare  @disPatientId varchar(100);
declare  @disPatientIdSource varchar(100);


 BEGIN TRY

--Delete duplicate rows with same encounter and patient combination
set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY encounter_map_id,encounter_map_id_source,encounter_id,encounter_id_source 
  ORDER BY encounter_map_id,encounter_map_id_source,encounter_id,encounter_id_source ) AS RNUM FROM ' + @tempEidTableName +') 
delete  from deleteTempDup where rnum>1';
exec sp_executesql @deleteDuplicateSql;


--set IDENTITY_INSERT encounter_mapping ON; 
 -- get max encounter num
 select @maxEncounterNum = isnull(max(encounter_num),0) from encounter_mapping with (UPDLOCK); 
 -- cursor which iterates distinct encounter_id,encounter_id_source compination
 SELECT @sql_stmt = 'DECLARE my_cur INSENSITIVE CURSOR FOR ' +
              ' SELECT distinct encounter_id,encounter_id_source,patient_map_id,patient_map_id_source from ' +  @tempEidTableName  ;
EXEC sp_executesql @sql_stmt;

OPEN my_cur;

-- jgk 10/13/14: Fixes to handle non-globally unique non-HIVE encounter ids
FETCH NEXT FROM my_cur into @disEncounterId, @disEncounterIdSource, @disPatientId,@disPatientIdSource ;
 WHILE @@FETCH_STATUS = 0
 
 BEGIN 
 BEGIN TRANSACTION
  if  @disEncounterIdSource = 'HIVE'   
   begin
    --check if hive number exist, if so assign that number to reset of map_id's within that pid
    select @existingEncounterNum = encounter_num from encounter_mapping where encounter_num = @disEncounterId and encounter_ide_source = 'HIVE';
    
   if @existingEncounterNum is not NULL 
   begin
        set @sql_stmt =  ' update ' + @tempEidTableName  + ' set encounter_num = encounter_id, process_status_flag = ''P'' ' + 
        ' where encounter_id = @pdisEncounterId and not exists (select 1 from encounter_mapping em where em.encounter_ide = encounter_map_id ' + 
        ' and em.encounter_ide_source = encounter_map_id_source)'; 
        EXEC sp_executesql @sql_stmt,N'@pdisEncounterId nvarchar(200)', @pdisEncounterId = @disEncounterId;
    end
    else 
    begin
        -- generate new patient_num i.e. take max(_num) + 1 
        if @maxEncounterNum < @disEncounterId 
        begin
            set @maxEncounterNum = @disEncounterId;
        end;
        set @sql_stmt = ' update ' + @tempEidTableName + ' set encounter_num = encounter_id, process_status_flag = ''P'' where ' +
        ' encounter_id =  @pdisEncounterId and encounter_id_source = ''HIVE'' and not exists (select 1 from encounter_mapping em where em.encounter_ide = encounter_map_id ' +
        ' and em.encounter_ide_source = encounter_map_id_source)'; 
        EXEC sp_executesql @sql_stmt, N'@pdisEncounterId nvarchar(200)',@pdisEncounterId=@disEncounterId ;
     end;    
    -- print ' HIVE ';
 end
 else 
 begin
		-- jgk 10/13/14: non hive encounter #s do not need to be globally unique (3 changes in lines below)
       select @existingEncounterNum = encounter_num  from encounter_mapping where encounter_ide = @disEncounterId and 
        encounter_ide_source = @disEncounterIdSource and patient_ide=@disPatientId and patient_ide_source=@disPatientIdSource; 

       
       if @existingEncounterNum is not  NULL
       begin
            set @sql_stmt =  ' update ' + @tempEidTableName + ' set encounter_num = @pexistingEncounterNum, process_status_flag = ''P'' ' + 
            ' where encounter_id = @pdisEncounterId and not exists (select 1 from encounter_mapping em where em.encounter_ide = encounter_map_id ' +
            ' and em.encounter_ide_source = encounter_map_id_source and em.patient_ide_source = patient_map_id_source and em.patient_ide=patient_map_id)' ;
        EXEC sp_executesql @sql_stmt,N'@pexistingEncounterNum int, @pdisEncounterId nvarchar(200)',@pexistingEncounterNum=@existingEncounterNum ,
          @pdisEncounterId=@disEncounterId;
       end
       else
       begin
            -- jgk 10/16/14: Upate HIVE insert to include patient info
            set @maxEncounterNum = @maxEncounterNum + 1 ;
             set @sql_stmt =   ' insert into ' + @tempEidTableName + ' (patient_map_id,patient_map_id_source,encounter_map_id,encounter_map_id_source,encounter_id,encounter_id_source,encounter_num,process_status_flag
             ,encounter_map_id_status,update_date,download_date,import_date,sourcesystem_cd) 
             values(@pdisPatientId,@pdisPatientIdSource,@pmaxEncounterNum1,''HIVE'',@pmaxEncounterNum2,''HIVE'',@pmaxEncounterNum3,''P'',''A'',getdate(),getdate(),getdate(),''edu.harvard.i2b2.crc'')' ;
            EXEC sp_executesql @sql_stmt, N'@pdisPatientId nvarchar(200),@pdisPatientIdSource nvarchar(200),@pmaxEncounterNum1 int,@pmaxEncounterNum2 int, @pmaxEncounterNum3 int', 
            @pdisPatientid=@disPatientId,@pdisPatientIdSource=@disPatientIdSource,@pmaxEncounterNum1=@maxEncounterNum,@pmaxEncounterNum2=@maxEncounterNum,@pmaxEncounterNum3=@maxEncounterNum; 
            
			 set @sql_stmt =   ' update ' + @tempEidTableName +' set encounter_num = @pmaxEncounterNum , process_status_flag = ''P'' ' +  
             ' where encounter_id = @pdisEncounterId and  not exists (select 1 from ' + 
             ' encounter_mapping em where em.encounter_ide = encounter_map_id ' + 
             ' and em.encounter_ide_source = encounter_map_id_source and em.patient_ide_source = patient_map_id_source ' +
			 ' and em.patient_ide=patient_map_id)' ; 
            EXEC sp_executesql @sql_stmt,N'@pmaxEncounterNum int,@pdisEncounterId nvarchar(200)',@pmaxEncounterNum=@maxEncounterNum , @pdisEncounterId=@disEncounterId;
            
       end  ;
    
      -- print ' NOT HIVE ';
 end ; 
commit;
FETCH NEXT FROM my_cur into @disEncounterId, @disEncounterIdSource, @disPatientId,@disPatientIdSource ;
END ;
CLOSE my_cur
DEALLOCATE my_cur
 BEGIN TRANSACTION 
-- do the mapping update if the update date is old and the encounter_id_source is HIVE
   set @sql_stmt = ' update encounter_mapping set encounter_num = temp.encounter_id,
    	patient_ide   =   temp.patient_map_id ,
    	patient_ide_source  =	temp.patient_map_id_source ,
    	encounter_ide_status	= temp.encounter_map_id_status  ,
    	update_date = temp.update_date,
    	download_date  = temp.download_date ,
		import_date = getdate() ,
    	sourcesystem_cd  = temp.sourcesystem_cd ,
		upload_id = ' + convert(nvarchar,@upload_id) + ' 
		from encounter_mapping em  
         inner join ' + @tempEidTableName + ' temp
                    on em.encounter_ide = temp.encounter_map_id and
			em.encounter_ide_source = temp.encounter_map_id_source 
    	where  temp.encounter_id_source = ''HIVE'' and temp.process_status_flag is null  and
        isnull(em.update_date,0)<= isnull(temp.update_date,0) ' ;
EXEC sp_executesql @sql_stmt;

-- insert new encounters into encounter_mapping  -- jk: added dummy project_id -- jk: insert patient info now
set @sql_stmt =  ' insert into encounter_mapping (encounter_ide,encounter_ide_source,encounter_ide_status,patient_ide,patient_ide_source,encounter_num,update_date,download_date,import_date,sourcesystem_cd,project_id,upload_id) 
    select encounter_map_id,encounter_map_id_source,encounter_map_id_status,patient_map_id,patient_map_id_source,encounter_num,update_date,download_date,getdate(),sourcesystem_cd,
	''@'' project_id,' + convert(nvarchar,@upload_id) + ' from ' + @tempEidTableName + '  
    where process_status_flag = ''P'' ' ; 
EXEC sp_executesql @sql_stmt;
commit;
END TRY

BEGIN CATCH
   if @@TRANCOUNT > 0
   begin
      ROLLBACK
   end
   begin try
   DEALLOCATE my_cur
   end try
   begin catch
   end catch  
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH

end;
GO
/****** Object:  StoredProcedure [dbo].[INSERT_ENCOUNTERVISIT_FROMTEMP]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  PROCEDURE   [dbo].[INSERT_ENCOUNTERVISIT_FROMTEMP] (@tempTableName  VARCHAR(500), @upload_id int ,
 @errorMsg varchar(max) = NULL OUTPUT) 
AS 

BEGIN 
declare @deleteDuplicateSql nvarchar(MAX), 
 @insertSql nvarchar(MAX) ,
 @updateSql nvarchar(MAX);

BEGIN TRY
  BEGIN TRANSACTION
  --set IDENTITY_INSERT encounter_mapping on
  select max(encounter_num) from encounter_mapping with (UPDLOCK); 

--Delete duplicate rows with same encounter and patient combination
set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY encounter_id,encounter_id_source,patient_id,patient_id_source 
  ORDER BY encounter_id,encounter_id_source ) AS RNUM FROM ' + @tempTableName +') 
delete  from deleteTempDup where rnum>1';

exec sp_executesql @deleteDuplicateSql;
	
	 --Create new patient(patient_mapping) if temp table patient_ide does not exists 
	-- in patient_mapping table. - jk: changed project id to @ for consistency; will need to eventually support projects
     set @insertSql = ' insert into encounter_mapping (encounter_ide,encounter_ide_source,encounter_num,patient_ide,patient_ide_source,encounter_ide_status,project_id, upload_id)
     	(select distinctTemp.encounter_id, distinctTemp.encounter_id_source, distinctTemp.encounter_id,  distinctTemp.patient_id,distinctTemp.patient_id_source,''A'',''@'',  ' + convert(nvarchar,@upload_id) + '
				from 
					(select distinct encounter_id, encounter_id_source,patient_id,patient_id_source from ' + @tempTableName + '  temp
					where 
				     not exists (select encounter_ide from encounter_mapping em where em.encounter_ide = temp.encounter_id and em.encounter_ide_source = temp.encounter_id_source)
					 and encounter_id_source = ''HIVE'' )   distinctTemp) ' ;

    exec sp_executesql @insertSql;
    	

    	
	-- update patient_num for temp table
 set @updateSql =  ' UPDATE ' +  @tempTableName + ' SET encounter_num = (SELECT em.encounter_num
		     FROM encounter_mapping em
		     WHERE em.encounter_ide = '+  @tempTableName + '.encounter_id
                     and em.encounter_ide_source = '+ @tempTableName +'.encounter_id_source 
					 and isnull(em.patient_ide_source,'''') = isnull('+ @tempTableName +'.patient_id_source,'''')
				     and isnull(em.patient_ide,'''')= isnull('+ @tempTableName +'.patient_id,'''')
	 	    )
WHERE EXISTS (SELECT em.encounter_num 
		     FROM encounter_mapping em
		     WHERE em.encounter_ide = '+ @tempTableName +'.encounter_id
                     and em.encounter_ide_source = '+ @tempTableName +'.encounter_id_source
					 and isnull(em.patient_ide_source,'''') = isnull('+ @tempTableName +'.patient_id_source,'''')
				     and isnull(em.patient_ide,'''')= isnull('+ @tempTableName +'.patient_id,''''))';	     

exec sp_executesql @updateSql;



exec sp_executesql @updateSql;
set @updateSql = ' UPDATE visit_dimension  set 
			 		inout_cd = temp.inout_cd,
			 		location_cd = temp.location_cd,
			 		location_path = temp.location_path,
			 		start_date = temp.start_date,
			 		end_date = temp.end_date,
			 		visit_blob = temp.visit_blob,
			 		update_date = temp.update_date,
			 		download_date = temp.download_date,
			 		import_date = getdate(),
			 		sourcesystem_cd = temp.sourcesystem_cd
                    from visit_dimension vd 
                    inner join ' + @tempTableName + ' temp
                    on  vd.encounter_num = temp.encounter_num
				    where temp.update_date >= vd.update_date
';
exec sp_executesql @updateSql;

 -- jk: added project_id='@' to WHERE clause... need to support projects...
 set @insertSql =  ' insert into visit_dimension  (encounter_num,patient_num,START_DATE,END_DATE,INOUT_CD,LOCATION_CD,VISIT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD, UPLOAD_ID)
	               select temp.encounter_num, pm.patient_num,
					temp.START_DATE,temp.END_DATE,temp.INOUT_CD,temp.LOCATION_CD,temp.VISIT_BLOB,
					temp.update_date,
					temp.download_date,
					getdate(), -- import date
					temp.sourcesystem_cd,
		            '+ convert(nvarchar,@upload_id) +'
			from 
				' + @tempTableName + '  temp , patient_mapping pm 
			where 
                 temp.encounter_num is not null and 
		      	 not exists (select encounter_num from visit_dimension vd where vd.encounter_num = temp.encounter_num) and 
				 pm.patient_ide = temp.patient_id and pm.patient_ide_source = temp.patient_id_source
				 and pm.project_id=''@''
	 ';

exec sp_executesql @insertSql;

COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH    
END;
 
 
GO
/****** Object:  StoredProcedure [dbo].[INSERT_MODIFIER_FROMTEMP]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create   PROCEDURE  [dbo].[INSERT_MODIFIER_FROMTEMP] (@tempModifierTableName VARCHAR(500), @upload_id int,
@errorMsg VARCHAR(MAX) = NULL OUTPUT) 
AS 

BEGIN 
 declare @deleteDuplicateSql nvarchar(max);
 declare @insertSql nvarchar(max);
 declare @updateSql nvarchar(max);
BEGIN TRY
  BEGIN TRANSACTION
	--Delete duplicate rows 

	set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY modifier_path,modifier_cd ORDER BY modifier_path,modifier_cd ) AS RNUM FROM ' + @tempModifierTableName +') 
delete  from deleteTempDup where rnum>1';
	exec sp_executesql @deleteDuplicateSql;




set @updateSql = ' UPDATE modifier_dimension  set 
			 		name_char= temp.name_char,
                    modifier_blob= temp.modifier_blob,
                    update_date= temp.update_date,
                    import_date = getdate(),
                    DOWNLOAD_DATE=temp.DOWNLOAD_DATE,
					SOURCESYSTEM_CD=temp.SOURCESYSTEM_CD,
					UPLOAD_ID = '+ convert(nvarchar,@upload_id)+ '
					from modifier_dimension cd 
                    inner join ' + @tempModifierTableName + ' temp
                    on  cd.modifier_path = temp.modifier_path
                    where temp.update_date >= cd.update_date';

      exec sp_executesql @updateSql;
   
  
	set @insertSql = 'insert into modifier_dimension(modifier_cd,modifier_path,name_char,modifier_blob, ' + 
                     ' update_date,download_date,import_date,sourcesystem_cd,upload_id)  ' + 
			         ' select  modifier_cd, modifier_path,name_char,modifier_blob, update_date,download_date, ' + 
                        ' getdate(),sourcesystem_cd,'+ convert(nvarchar,@upload_id) + ' from  ' + @tempModifierTableName +  ' temp ' +
					' where not exists (select modifier_cd from modifier_dimension cd where ' + 
				    ' cd.modifier_path = temp.modifier_path) ';

    exec sp_executesql @insertSql;
   COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg; 
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH

END;
 
 



GO
/****** Object:  StoredProcedure [dbo].[INSERT_PATIENT_FROMTEMP]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  PROCEDURE   [dbo].[INSERT_PATIENT_FROMTEMP] (@tempPatientTableName  VARCHAR(500),  @upload_id  INT,
 @errorMsg varchar(max)  = NULL OUTPUT) 
AS 

BEGIN 
	declare @insertPmSql nvarchar(MAX), @insertSql nvarchar(MAX); 
	declare @updateSql nvarchar(MAX);
BEGIN TRY
  BEGIN TRANSACTION
  select max(patient_num) from patient_mapping with (UPDLOCK); 

	--Create new patient mapping entry for HIVE patient's if they are not already mapped in mapping table
	set @insertPmSql =  'insert into patient_mapping (patient_ide,patient_ide_source,patient_ide_status,
patient_num,upload_id) 
		select distinct temp.patient_id, temp.patient_id_source,''A'',temp.patient_id , '+ convert(nvarchar,@upload_id)+ ' 
		from ' + @tempPatientTableName +'  temp 
		where temp.patient_id_source = ''HIVE'' and 
   		not exists (select patient_ide from patient_mapping pm where pm.patient_num = temp.patient_id and pm.patient_ide_source = temp.patient_id_source) 
		'; 

   print @insertPmSql;

    --Create new visit for above inserted encounter's
	--If Visit table's encounter and patient num does match temp table,
	--then new visit information is created.

 exec sp_executesql  @insertPmSql;
 
 --One time lookup on patient_ide to get patient_num 
set @updateSql =  'UPDATE ' + @tempPatientTableName + 
  ' SET patient_num = (SELECT pm.patient_num
		     FROM patient_mapping pm
		     WHERE pm.patient_ide = ' +  @tempPatientTableName +'.patient_id
                     and pm.patient_ide_source = '+ @tempPatientTableName+'.patient_id_source
	 	    )
WHERE EXISTS (SELECT pm.patient_num 
		     FROM patient_mapping pm
		     WHERE pm.patient_ide = '+ @tempPatientTableName+'.patient_id
                     and pm.patient_ide_source = '+ @tempPatientTableName+'.patient_id_source)';		     

exec sp_executesql @updateSql;

set @updateSql =  'UPDATE ' +  @tempPatientTableName +
    ' SET patient_num = convert(numeric,patient_id) 
      WHERE patient_id_source = ''HIVE''';

exec sp_executesql @updateSql;

set @updateSql = ' UPDATE patient_dimension  set 
			 		VITAL_STATUS_CD= temp.VITAL_STATUS_CD,
                    BIRTH_DATE= temp.BIRTH_DATE,
                    DEATH_DATE= temp.DEATH_DATE,
                    SEX_CD= temp.SEX_CD,
                    AGE_IN_YEARS_NUM=temp.AGE_IN_YEARS_NUM,
                    LANGUAGE_CD=temp.LANGUAGE_CD,
                    RACE_CD=temp.RACE_CD,
                    MARITAL_STATUS_CD=temp.MARITAL_STATUS_CD,
                    RELIGION_CD=temp.RELIGION_CD,
                    ZIP_CD=temp.ZIP_CD,
					STATECITYZIP_PATH =temp.STATECITYZIP_PATH,
					PATIENT_BLOB=temp.PATIENT_BLOB,
					UPDATE_DATE=temp.UPDATE_DATE,
					DOWNLOAD_DATE=temp.DOWNLOAD_DATE,
					SOURCESYSTEM_CD=temp.SOURCESYSTEM_CD,
					UPLOAD_ID = '+ convert(nvarchar,@upload_id)+ '
					from patient_dimension pd 
                    inner join ' + @tempPatientTableName + ' temp
                    on  pd.patient_num = temp.patient_num
                    where temp.update_date >= pd.update_date
';

print @updateSql;

exec sp_executesql @updateSql;


	set @insertSql = ' insert into patient_dimension(
					PATIENT_NUM,
					VITAL_STATUS_CD,
                    BIRTH_DATE,
                    DEATH_DATE,
                    SEX_CD,
                    AGE_IN_YEARS_NUM,
                    LANGUAGE_CD,
                    RACE_CD,
                    MARITAL_STATUS_CD,
                    RELIGION_CD,
                    ZIP_CD,
					STATECITYZIP_PATH,
					PATIENT_BLOB,
					UPDATE_DATE,
					DOWNLOAD_DATE,
					SOURCESYSTEM_CD,
					import_date,
	                upload_id
 					) 
			 	 select 
 					temp.PATIENT_NUM,
					temp.VITAL_STATUS_CD,
                    temp.BIRTH_DATE,
                    temp.DEATH_DATE,
                    temp.SEX_CD,
                    temp.AGE_IN_YEARS_NUM,
                    temp.LANGUAGE_CD,
                    temp.RACE_CD,
                    temp.MARITAL_STATUS_CD,
                    temp.RELIGION_CD,
                    temp.ZIP_CD,
					temp.STATECITYZIP_PATH,
					temp.PATIENT_BLOB,
					temp.UPDATE_DATE,
					temp.DOWNLOAD_DATE,
					temp.SOURCESYSTEM_CD,
					getdate(),
	     			' + convert(nvarchar,@upload_id)+' 
	     			 from ' + @tempPatientTableName + ' temp
				 where not exists (select pd.patient_num from patient_dimension pd  
                 where temp.patient_num  = pd.patient_num  ) 
                 and temp.patient_num is not null';
                 

print @insertSql;

exec sp_executesql @insertSql;
  COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH
END;
 
 

GO
/****** Object:  StoredProcedure [dbo].[INSERT_PATIENT_MAP_FROMTEMP]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  PROCEDURE          [dbo].[INSERT_PATIENT_MAP_FROMTEMP] (@tempPatientTableName  VARCHAR(500),  @upload_id  INT,
  @errorMsg varchar(max)  = NULL OUTPUT) 
AS 

BEGIN 
	declare @insertPmSql nvarchar(MAX), @insertSql nvarchar(MAX); 
	declare @updateSql nvarchar(MAX);
BEGIN TRY
  BEGIN TRANSACTION
  select max(patient_num) from patient_mapping with (UPDLOCK); 

	--Create new patient mapping entry for HIVE patient's if they are not already mapped in mapping table
	set @insertPmSql =  'insert into patient_mapping (patient_ide,patient_ide_source,patient_ide_status,
patient_num,upload_id) 
		select distinct temp.patient_id, temp.patient_id_source,''A'',temp.patient_id , '+ convert(nvarchar,@upload_id)+ ' 
		from ' + @tempPatientTableName +'  temp 
		where temp.patient_id_source = ''HIVE'' and 
   		not exists (select patient_ide from patient_mapping pm where pm.patient_num = temp.patient_id and pm.patient_ide_source = temp.patient_id_source) 
		'; 

   print @insertPmSql;

    --Create new visit for above inserted encounter's
	--If Visit table's encounter and patient num does match temp table,
	--then new visit information is created.

 exec sp_executesql  @insertPmSql;
 
 --One time lookup on patient_ide to get patient_num 
set @updateSql =  'UPDATE ' + @tempPatientTableName + 
  ' SET patient_num = (SELECT pm.patient_num
		     FROM patient_mapping pm
		     WHERE pm.patient_ide = ' +  @tempPatientTableName +'.patient_id
                     and pm.patient_ide_source = '+ @tempPatientTableName+'.patient_id_source
	 	    )
WHERE EXISTS (SELECT pm.patient_num 
		     FROM patient_mapping pm
		     WHERE pm.patient_ide = '+ @tempPatientTableName+'.patient_id
                     and pm.patient_ide_source = '+ @tempPatientTableName+'.patient_id_source)';		     

exec sp_executesql @updateSql;

set @updateSql =  'UPDATE ' +  @tempPatientTableName +
    ' SET patient_num = convert(numeric,patient_id) 
      WHERE patient_id_source = ''HIVE''';

exec sp_executesql @updateSql;

set @updateSql = ' UPDATE patient_dimension  set 
			 		VITAL_STATUS_CD= temp.VITAL_STATUS_CD,
                    BIRTH_DATE= temp.BIRTH_DATE,
                    DEATH_DATE= temp.DEATH_DATE,
                    SEX_CD= temp.SEX_CD,
                    AGE_IN_YEARS_NUM=temp.AGE_IN_YEARS_NUM,
                    LANGUAGE_CD=temp.LANGUAGE_CD,
                    RACE_CD=temp.RACE_CD,
                    MARITAL_STATUS_CD=temp.MARITAL_STATUS_CD,
                    RELIGION_CD=temp.RELIGION_CD,
                    ZIP_CD=temp.ZIP_CD,
					STATECITYZIP_PATH =temp.STATECITYZIP_PATH,
					PATIENT_BLOB=temp.PATIENT_BLOB,
					UPDATE_DATE=temp.UPDATE_DATE,
					DOWNLOAD_DATE=temp.DOWNLOAD_DATE,
					SOURCESYSTEM_CD=temp.SOURCESYSTEM_CD,
					UPLOAD_ID = '+ convert(nvarchar,@upload_id)+ '
					from patient_dimension pd 
                    inner join ' + @tempPatientTableName + ' temp
                    on  pd.patient_num = temp.patient_num
                    where temp.update_date > pd.update_date
';

print @updateSql;

exec sp_executesql @updateSql;


	set @insertSql = ' insert into patient_dimension(
					PATIENT_NUM,
					VITAL_STATUS_CD,
                    BIRTH_DATE,
                    DEATH_DATE,
                    SEX_CD,
                    AGE_IN_YEARS_NUM,
                    LANGUAGE_CD,
                    RACE_CD,
                    MARITAL_STATUS_CD,
                    RELIGION_CD,
                    ZIP_CD,
					STATECITYZIP_PATH,
					PATIENT_BLOB,
					UPDATE_DATE,
					DOWNLOAD_DATE,
					SOURCESYSTEM_CD,
					import_date,
	                upload_id
 					) 
			 	 select 
 					temp.PATIENT_NUM,
					temp.VITAL_STATUS_CD,
                    temp.BIRTH_DATE,
                    temp.DEATH_DATE,
                    temp.SEX_CD,
                    temp.AGE_IN_YEARS_NUM,
                    temp.LANGUAGE_CD,
                    temp.RACE_CD,
                    temp.MARITAL_STATUS_CD,
                    temp.RELIGION_CD,
                    temp.ZIP_CD,
					temp.STATECITYZIP_PATH,
					temp.PATIENT_BLOB,
					temp.UPDATE_DATE,
					temp.DOWNLOAD_DATE,
					temp.SOURCESYSTEM_CD,
					getdate(),
	     			' + convert(nvarchar,@upload_id)+' 
	     			 from ' + @tempPatientTableName + ' temp
				 where not exists (select pd.patient_num from patient_dimension pd  
                 where temp.patient_num  = pd.patient_num  
                 and temp.patient_num is not null)';
                 

print @insertSql;

exec sp_executesql @insertSql;
  COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH
END;
 
 

GO
/****** Object:  StoredProcedure [dbo].[INSERT_PID_MAP_FROMTEMP]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE  [dbo].[INSERT_PID_MAP_FROMTEMP] (@tempPatientMapTableName VARCHAR(500), @upload_id INT, 
   @errorMsg varchar(max)  = NULL OUTPUT) 
AS 

BEGIN 
  declare @deleteDuplicateSql nvarchar(MAX),
    @insertSql nvarchar(MAX); 

declare  @existingPatientNum nvarchar(32);
declare @maxPatientNum int;
declare @disPatientId nvarchar(200); 
declare @disPatientIdSource nvarchar(50);
declare @sql nvarchar(MAX);
BEGIN TRY
   

	--Delete duplicate rows with same patient combination
	set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY patient_map_id,patient_map_id_source,patient_id,patient_id_source 
  ORDER BY patient_map_id,patient_map_id_source,patient_id,patient_id_source ) AS RNUM FROM ' + @tempPatientMapTableName +') 
delete  from deleteTempDup where rnum>1';

exec sp_executesql @deleteDuplicateSql;
	 
--get max patient_num from patient_mapping table
select @maxPatientNum = isnull(max(patient_num),0) from patient_mapping with (UPDLOCK); 
-- create cursor to iterate distinct event_id,event_id_source combination 
SELECT @sql = 'DECLARE my_cur INSENSITIVE CURSOR FOR ' +
              ' SELECT distinct patient_id,patient_id_source from ' +  @tempPatientMapTableName  ;
EXEC sp_executesql @sql

OPEN my_cur

FETCH NEXT FROM my_cur into @disPatientId, @disPatientIdSource ;
 WHILE @@FETCH_STATUS = 0

 BEGIN 
BEGIN TRANSACTION
  -- print @disPatientId + ' ' + @disPatientIdSource      
  if  @disPatientIdSource = 'HIVE'  
  begin
     --check if hive number exist, if so assign that number to reset of map_id's within that pid
     select @existingPatientNum  = patient_num  from patient_mapping where patient_num = @disPatientId and patient_ide_source = 'HIVE';
   
     if @existingPatientNum IS NOT NULL
     begin 
        -- print 'not null'
        set @sql = ' update ' + @tempPatientMapTableName + ' set patient_num = patient_id, process_status_flag = ''P'' ' + 
        ' where patient_id =  @pdisPatientId   and not exists (select 1 from patient_mapping pm where pm.patient_ide = patient_map_id ' + 
        ' and pm.patient_ide_source = patient_map_id_source)' ;  
        EXEC sp_executesql @sql, N'@pdisPatientId nvarchar(200)',  @pdisPatientId = @disPatientId; 
        --EXEC sp_executesql @sql;
        --select @disPatientId;
     end
     else 
     begin
        -- print 'null not exist HIVE' + @disPatientId
        -- generate new patient_num i.e. take max(patient_num) + 1 
        if @maxPatientNum < @disPatientId 
        begin
           set @maxPatientNum = @disPatientId;
        end;
        set @sql = ' update ' + @tempPatientMapTableName +' set patient_num = patient_id, process_status_flag = ''P'' where ' +
        ' patient_id = @pdisPatientId and patient_id_source = ''HIVE'' and not exists (select 1 from patient_mapping pm where pm.patient_ide = patient_map_id ' +
        ' and pm.patient_ide_source = patient_map_id_source)';
        EXEC sp_executesql @sql, N'@pdisPatientId nvarchar(200)', @pdisPatientId=@disPatientId;
      end; 
   -- test if record fectched
   print ' HIVE ';
  end;
 else 
 begin
       select @existingPatientNum = patient_num   from patient_mapping where patient_ide = @disPatientId and 
        patient_ide_source = @disPatientIdSource ; 

       -- test if record fetched. 
      
       if @existingPatientNum is not NULL
       begin
          set @sql = ' update ' + @tempPatientMapTableName +' set patient_num = @pexistingPatientNum , process_status_flag = ''P'' ' + 
            ' where patient_id = @pdisPatientId and not exists (select 1 from patient_mapping pm where pm.patient_ide = patient_map_id ' + 
            ' and pm.patient_ide_source = patient_map_id_source)' ; 
            EXEC sp_executesql @sql,N'@pexistingPatientNum int, @pdisPatientId nvarchar(200)',@pexistingPatientNum=@existingPatientNum,@pdisPatientId=disPatientId;
       end
       else 
       begin
              -- print ' NOT HIVE and not present ' + @disPatientId;
             set @maxPatientNum = @maxPatientNum + 1 ;
             set @sql = 'insert into ' + @tempPatientMapTableName + ' (patient_map_id,patient_map_id_source,patient_id,patient_id_source,patient_num,process_status_flag ' + 
             ',patient_map_id_status,update_date,download_date,import_date,sourcesystem_cd ) ' +  
             ' values(@pmaxPatientNum1,''HIVE'',@pmaxPatientNum2,''HIVE'',@pmaxPatientNum3,''P'',''A'',getdate(),getdate(),getdate(),''edu.harvard.i2b2.crc'')' ;  
             EXEC sp_executesql  @sql ,N'@pmaxPatientNum1 int,@pmaxPatientNum2 int,
			@pmaxPatientNum3 int',@pmaxPatientNum1 = @maxPatientNum ,@pmaxPatientNum2 = @maxPatientNum,@pmaxPatientNum3 = @maxPatientNum; 
            set @sql =  'update ' + @tempPatientMapTableName + ' set patient_num =  @pmaxPatientNum , process_status_flag = ''P'' ' +  
             ' where patient_id = @pdisPatientId and  not exists (select 1 from ' + 
            ' patient_mapping pm where pm.patient_ide = patient_map_id ' + 
            ' and pm.patient_ide_source = patient_map_id_source)' ; 
             EXEC sp_executesql @sql,N'@pmaxPatientNum int,@pdisPatientId nvarchar(200)',@pmaxPatientNum = @maxPatientNum, @pdisPatientId=@disPatientId  ;
          end;
        
 end ;
commit;
 FETCH NEXT FROM my_cur into @disPatientId, @disPatientIdSource ;
END

CLOSE my_cur
DEALLOCATE my_cur
BEGIN TRANSACTION

-- do the mapping update if the update date is old
   set @sql = ' update patient_mapping set patient_num = temp.patient_id,
    	patient_ide_status	= temp.patient_map_id_status  ,
    	update_date = temp.update_date,
    	download_date  = temp.download_date ,
		import_date = getdate() ,
    	sourcesystem_cd  = temp.sourcesystem_cd ,
		upload_id = ' + convert(nvarchar,@upload_id) + ' 
		from patient_mapping pm 
        inner join ' + @tempPatientMapTableName + ' temp
        on  pm.patient_ide = temp.patient_map_id and pm.patient_ide_source = temp.patient_map_id_source
        where temp.patient_id_source = ''HIVE'' and temp.process_status_flag is null  and isnull(temp.update_date,0) >= isnull(pm.update_date,0)';

EXEC sp_executesql @sql;

-- jk: added project id
set @sql = ' insert into patient_mapping (patient_ide,patient_ide_source,patient_ide_status,patient_num,update_date,download_date,import_date,sourcesystem_cd,project_id,upload_id) ' + 
    ' select patient_map_id,patient_map_id_source,patient_map_id_status,patient_num,update_date,download_date,getdate(),sourcesystem_cd,
	''@'' project_id,' + convert(nvarchar,@upload_id) + ' from '+@tempPatientMapTableName+  
    ' where process_status_flag = ''P'' ' ;
EXEC sp_executesql @sql;

commit;
 
 END TRY
BEGIN CATCH
   if @@TRANCOUNT > 0 
  begin
     ROLLBACK
   end
   
   begin try
   DEALLOCATE my_cur
   end try
   begin catch
   end catch 
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH
END;
GO
/****** Object:  StoredProcedure [dbo].[INSERT_PROVIDER_FROMTEMP]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  PROCEDURE  [dbo].[INSERT_PROVIDER_FROMTEMP] (@tempProviderTableName VARCHAR(500), @upload_id INT,
  @errorMsg varchar(max)  = NULL OUTPUT) 
AS 

BEGIN 
  declare @deleteDuplicateSql nvarchar(MAX), @insertSql nvarchar(MAX),@updateSql nvarchar(MAX); 
BEGIN TRY
BEGIN TRANSACTION
	--Delete duplicate rows with same encounter and patient combination
	set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY provider_path 
  ORDER BY provider_path ) AS RNUM FROM ' + @tempProviderTableName +') 
delete  from deleteTempDup where rnum>1';

exec sp_executesql @deleteDuplicateSql;
	
set @updateSql = ' UPDATE patient_dimension  set 
			 	    provider_id = temp.provider_id,
                    name_char = temp.name_char,
				    provider_blob = provider_blob,
                    IMPORT_DATE=getdate(),
                 	UPDATE_DATE=temp.UPDATE_DATE,
					DOWNLOAD_DATE=temp.DOWNLOAD_DATE,
					SOURCESYSTEM_CD=temp.SOURCESYSTEM_CD,
					UPLOAD_ID = '+ convert(nvarchar,@upload_id)+ '
					from provider_dimension pd 
                    inner join ' + @tempProviderTableName + ' temp
                    on  pd.provider_path = temp.provider_path
                    where temp.update_date >= pd.update_date
';

print @updateSql;

   
    --Create new patient(patient_mapping) if temp table patient_ide does not exists 
	-- in patient_mapping table.
		set @insertSql =  'insert into provider_dimension  (provider_id,provider_path,name_char,provider_blob,update_date,download_date,import_date,sourcesystem_cd,upload_id)
			    select  provider_id,provider_path, 
                        name_char,provider_blob,
                        update_date,download_date,
                        getdate(),sourcesystem_cd, ' + convert(nvarchar,@upload_id) +  '
	                    from ' + @tempProviderTableName + '  temp
					where not exists (select provider_id from provider_dimension pd where pd.provider_path = temp.provider_path)
				';

exec sp_executesql @insertSql;

COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1);
 END CATCH
END;
 
 
GO
/****** Object:  StoredProcedure [dbo].[REMOVE_TEMP_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[REMOVE_TEMP_TABLE](@tempTableName VARCHAR(500)) 
AS
BEGIN 
    declare @dropSql nvarchar(MAX);
	set @dropSql = 'drop table ' + @tempTableName + ' ';
	exec sp_executesql @dropSql;
END;
GO
/****** Object:  StoredProcedure [dbo].[SYNC_CLEAR_CONCEPT_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create 
PROCEDURE [dbo].[SYNC_CLEAR_CONCEPT_TABLE] (@tempConceptTableName varchar(500), @backupConceptTableName VARCHAR(500), @upload_id INT, @errorMsg varchar(max) = NULL OUTPUT) 
as

BEGIN 
declare @exec_str nvarchar(MAX);
declare @interConceptDimensionTableName nvarchar(MAX);
declare  @deleteDuplicateSql nvarchar(MAX);
BEGIN TRY
BEGIN TRANSACTION

	--Delete duplicate rows with same encounter and patient combination
	set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY concept_path,concept_cd ORDER BY concept_path,concept_cd ) AS RNUM FROM ' + @tempConceptTableName +') 
delete  from deleteTempDup where rnum>1';
	exec sp_executesql @deleteDuplicateSql;
	
set @interConceptDimensionTableName = @backupConceptTableName + '_inter'; 

-- create new table and indexes
set @exec_str = ' create table '  + @interConceptDimensionTableName  +' (
    concept_path   	varchar(700) NOT NULL,
	concept_cd     	varchar(50) NULL,
	name_char      	varchar(2000) NULL,
	concept_blob   	VARCHAR(MAX) NULL,
	update_date    	datetime NULL,
	download_date  	datetime NULL,
	import_date    	datetime NULL,
	sourcesystem_cd	varchar(50) NULL,
      UPLOAD_ID       INT NULL,
    CONSTRAINT '+ @interConceptDimensionTableName +'_PK PRIMARY KEY(concept_path)
	 )';
exec sp_executesql  @exec_str; 

-- insert temp to new table 
set @exec_str = ' insert into ' +  @interConceptDimensionTableName + ' (concept_cd, concept_path,name_char,concept_blob,update_date, download_date, import_date, sourcesystem_cd,upload_id)   select  ' +
 ' concept_cd, concept_path,name_char,concept_blob,update_date, download_date, import_date, sourcesystem_cd,' + convert(nvarchar,@upload_id) + ' from ' + @tempConceptTableName ;
exec  sp_executesql  @exec_str;

--rename concept table to backup table 
exec sp_rename 'concept_dimension', @backupConceptTableName;

set  @exec_str = 'CREATE INDEX idx_' + @interConceptDimensionTableName + '_uid ON ' 
      +  @interConceptDimensionTableName + '  (upload_id)';
exec  sp_executesql  @exec_str;  

set  @exec_str = 'CREATE INDEX idx_' + @interConceptDimensionTableName + '_cpcd ON ' 
      +  @interConceptDimensionTableName + '  (concept_path,concept_cd)';
exec  sp_executesql  @exec_str;  
      
--rename new table to concept table
exec sp_rename @interConceptDimensionTableName, 'concept_dimension';

  COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1);
 END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_CLEAR_MODIFIER_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create 
PROCEDURE [dbo].[SYNC_CLEAR_MODIFIER_TABLE] (@tempModifierTableName varchar(500), @backupModifierTableName VARCHAR(500), @upload_id INT, @errorMsg varchar(max) = NULL OUTPUT) 
as

BEGIN 
declare @exec_str nvarchar(MAX);
declare @interModifierDimensionTableName nvarchar(MAX);
declare  @deleteDuplicateSql nvarchar(MAX);
BEGIN TRY
BEGIN TRANSACTION

	--Delete duplicate rows with same modifier path and modifier cd
	set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY modifier_path,modifier_cd ORDER BY modifier_path,modifier_cd ) AS RNUM FROM ' + @tempModifierTableName +') 
delete  from deleteTempDup where rnum>1';
	exec sp_executesql @deleteDuplicateSql;
	
set @interModifierDimensionTableName = @backupModifierTableName + '_inter'; 

-- create new table and indexes
set @exec_str = ' create table '  + @interModifierDimensionTableName  +' (
    modifier_path   	varchar(700) NOT NULL,
    modifier_cd     	varchar(50) NULL,
	name_char      	varchar(2000) NULL,
	modifier_blob   	VARCHAR(MAX) NULL,
	update_date    	datetime NULL,
	download_date  	datetime NULL,
	import_date    	datetime NULL,
	sourcesystem_cd	varchar(50) NULL,
      UPLOAD_ID       INT NULL,
    CONSTRAINT '+ @interModifierDimensionTableName +'_PK PRIMARY KEY(modifier_path)
	 )';
exec sp_executesql  @exec_str; 

-- insert temp to new table 
set @exec_str = ' insert into ' +  @interModifierDimensionTableName + ' (modifier_cd, modifier_path,name_char,modifier_blob,update_date, download_date, import_date, sourcesystem_cd,upload_id)   select  ' +
 ' modifier_cd, modifier_path,name_char,modifier_blob,update_date, download_date, import_date, sourcesystem_cd,' + convert(nvarchar,@upload_id) + ' from ' + @tempModifierTableName ;
exec  sp_executesql  @exec_str;

--rename concept table to backup table 
exec sp_rename 'modifier_dimension', @backupModifierTableName;

set  @exec_str = 'CREATE INDEX idx_' + @interModifierDimensionTableName + '_uid ON ' 
      +  @interModifierDimensionTableName + '  (upload_id)';
exec  sp_executesql  @exec_str;  

set  @exec_str = 'CREATE INDEX idx_' + @interModifierDimensionTableName + '_mpmd ON ' 
      +  @interModifierDimensionTableName + '  (modifier_path,modifier_cd)';
exec  sp_executesql  @exec_str;  
      
--rename new table to concept table
exec sp_rename @interModifierDimensionTableName, 'modifier_dimension';

  COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1);
 END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_CLEAR_PROVIDER_TABLE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create 
PROCEDURE [dbo].[SYNC_CLEAR_PROVIDER_TABLE] (@tempProviderTableName varchar(500), @backupProviderTableName VARCHAR(500), @upload_id INT, @errorMsg varchar(max) = NULL OUTPUT) 
as

BEGIN 
declare @exec_str nvarchar(MAX);
declare @interProviderDimensionTableName nvarchar(MAX);
declare  @deleteDuplicateSql nvarchar(MAX);
BEGIN TRY
BEGIN TRANSACTION

	--Delete duplicate rows with temp provider table
	set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY provider_path,provider_id ORDER BY provider_path,provider_id ) AS RNUM FROM ' + @tempProviderTableName +') 
delete  from deleteTempDup where rnum>1';
	exec sp_executesql @deleteDuplicateSql;
	
set @interProviderDimensionTableName = @backupProviderTableName + '_inter'; 

-- create new table and indexes
set @exec_str = ' create table '  + @interProviderDimensionTableName  +' (
   Provider_Id    	varchar(50) NOT NULL,
	Provider_Path  	varchar(700) NOT NULL,
	Name_Char      	varchar(850) NULL,
	Provider_Blob  	VARCHAR(MAX) NULL,
	Update_Date    	datetime NULL,
	Download_Date  	datetime NULL,
	Import_Date    	datetime NULL,
	Sourcesystem_Cd	varchar(50) NULL ,
    UPLOAD_ID         	INT NULL,
    CONSTRAINT '+ @interProviderDimensionTableName +'_PK PRIMARY KEY(provider_path,provider_id)
	 )';
exec sp_executesql  @exec_str; 

-- insert temp to new table 
set @exec_str = ' insert into ' +  @interProviderDimensionTableName + ' (provider_id, provider_path,name_char,provider_blob,update_date, download_date, import_date, sourcesystem_cd,upload_id)   select  ' +
 ' provider_id, provider_path,name_char,provider_blob,update_date, download_date, import_date, sourcesystem_cd,' + convert(nvarchar,@upload_id) + ' from ' + @tempProviderTableName ;
exec  sp_executesql  @exec_str;

--rename concept table to backup table 
exec sp_rename 'provider_dimension', @backupProviderTableName;

--- add index on provider_id, name_char 
set  @exec_str = 'CREATE INDEX idx_' + @interProviderDimensionTableName + '_pid ON ' 
      +  @interProviderDimensionTableName + '  (provider_id,name_char)';
exec  sp_executesql  @exec_str; 


--- add index upload_id 
set  @exec_str = 'CREATE INDEX idx_' + @interProviderDimensionTableName + '_uid ON ' 
      +  @interProviderDimensionTableName + '  (upload_id)';
exec  sp_executesql  @exec_str;  


--rename new table to concept table
exec sp_rename @interProviderDimensionTableName, 'provider_dimension';

  COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1);
 END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[UPDATE_OBSERVATION_FACT]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  PROCEDURE  [dbo].[UPDATE_OBSERVATION_FACT] (@upload_temptable_name VARCHAR(500), @upload_id int, @appendFlag int, 
   @errorMsg varchar(max)  = NULL OUTPUT)
AS
BEGIN
 declare @deleteDuplicateSql nvarchar(MAX), @deleteNullStartDateSql nvarchar(MAX);
 declare @insertSql nvarchar(MAX), @updateSql nvarchar(MAX),@deleteSql nvarchar(MAX);
BEGIN TRY
  BEGIN TRANSACTION
--Delete duplicate records(encounter_ide,patient_ide,concept_cd,start_date,modifier_cd,provider_id)
set @deleteDuplicateSql = 'with deleteTempDup as (SELECT *,ROW_NUMBER() OVER 
( PARTITION BY encounter_id,encounter_id_source,patient_id,patient_id_source,
  concept_cd,start_date,modifier_cd,provider_id,instance_num ORDER BY encounter_id,encounter_id_source ) AS RNUM FROM ' + @upload_temptable_name +') 
delete  from deleteTempDup where rnum>1';

exec sp_executesql @deleteDuplicateSql;

--Delete records having null in start_date
set @deleteNullStartDateSql =  'DELETE FROM ' + @upload_temptable_name + '             
 where start_date is null';
exec sp_executesql @deleteNullStartDateSql;

           
           
--One time lookup on encounter_ide to get encounter_num jk: added dummy project id
-- jgk 10/13/14: site encounter #s are only distinct per patient
set @updateSql =  'UPDATE ' +  @upload_temptable_name
 + ' SET encounter_num = (SELECT distinct em.encounter_num
		     FROM encounter_mapping em
		     WHERE em.encounter_ide = ' + @upload_temptable_name + '.encounter_id
                     and em.encounter_ide_source = '+ @upload_temptable_name + '.encounter_id_source
					 and em.project_id=''@'' and em.patient_ide = ' + @upload_temptable_name +'.patient_id
                     and em.patient_ide_source = ' + @upload_temptable_name + '.patient_id_source
	 	    )
	 	
WHERE EXISTS (SELECT distinct em.encounter_num
		     FROM encounter_mapping em
		     WHERE em.encounter_ide = ' + @upload_temptable_name +'.encounter_id
                     and em.encounter_ide_source = ' + @upload_temptable_name +'.encounter_id_source
					 and em.project_id=''@'' 
                     and em.patient_ide = '  + @upload_temptable_name + '.patient_id
                     and em.patient_ide_source = '+ @upload_temptable_name +'.patient_id_source)';					 

exec sp_executesql @updateSql;

             
--One time lookup on patient_ide to get patient_num jk: added dummy project id
set @updateSql = 'UPDATE ' + @upload_temptable_name + 
  ' SET patient_num = (SELECT distinct pm.patient_num
		     FROM patient_mapping pm
		     WHERE pm.patient_ide = ' +  @upload_temptable_name +'.patient_id
                     and pm.patient_ide_source = '+ @upload_temptable_name+'.patient_id_source
					 and pm.project_id=''@''
	 	    )
WHERE EXISTS (SELECT distinct pm.patient_num 
		     FROM patient_mapping pm
		     WHERE pm.patient_ide = '+ @upload_temptable_name+'.patient_id
                     and pm.patient_ide_source = '+ @upload_temptable_name+'.patient_id_source
					 and pm.project_id=''@'')';		     
exec sp_executesql @updateSql;



IF @appendFlag = 0 BEGIN
--Archive records which are to be deleted in observation_fact table
set @insertSql =  'INSERT  INTO  archive_observation_fact (encounter_num,patient_num,concept_Cd,provider_id,start_date, 
modifier_cd,valtype_cd,tval_char,nval_num,valueflag_cd,quantity_num,units_cd,end_date,location_cd,confidence_num,instance_num,
observation_blob,update_date,download_date,import_date,sourcesystem_cd,archive_upload_id)
		SELECT obsfact.encounter_num,obsfact.patient_num,obsfact.concept_Cd,obsfact.provider_id,obsfact.start_date, 
obsfact.modifier_cd,obsfact.valtype_cd,obsfact.tval_char,obsfact.nval_num,obsfact.valueflag_cd,obsfact.quantity_num,
obsfact.units_cd,obsfact.end_date,obsfact.location_cd,obsfact.confidence_num,obsfact.instance_num,
obsfact.observation_blob,obsfact.update_date,obsfact.download_date,obsfact.import_date,obsfact.sourcesystem_cd, ' + convert(nvarchar,@upload_id) +' archive_upload_id 
		FROM observation_fact obsfact
		WHERE obsfact.encounter_num IN 
			(SELECT temp_obsfact.encounter_num
			FROM  ' + @upload_temptable_name +' temp_obsfact
                        group by  temp_obsfact.encounter_num  
            )';

exec sp_executesql @insertSql; 

--Delete above archived row from observation_fact
set @deleteSql  = 'DELETE  observation_fact 
					WHERE EXISTS (
					SELECT archive.encounter_num
					FROM archive_observation_fact  archive
					where archive.archive_upload_id = '+ convert(nvarchar,@upload_id) +'
                                         AND archive.encounter_num=observation_fact.encounter_num
										 AND archive.concept_cd = observation_fact.concept_cd
										 AND archive.start_date = observation_fact.start_date
                    )';

exec sp_executesql @deleteSql;
END;



IF @appendFlag = 0 begin
--Transfer all rows from temp_obsfact to observation_fact
set @insertSql =  'INSERT  INTO observation_fact(encounter_num,concept_cd, patient_num,provider_id, start_date,modifier_cd,instance_num,valtype_cd,tval_char,nval_num,valueflag_cd,
quantity_num,confidence_num,observation_blob,units_cd,end_date,location_cd, update_date,download_date,import_date,sourcesystem_cd,
upload_id) 
SELECT encounter_num,concept_cd, patient_num,provider_id, start_date,modifier_cd,instance_num,valtype_cd,tval_char,nval_num,valueflag_cd,
quantity_num,confidence_num,observation_blob,units_cd,end_date,location_cd, update_date,download_date,getdate() import_date,sourcesystem_cd,
temp.upload_id 
FROM ' + @upload_temptable_name +' temp
where temp.patient_num is not null and  temp.encounter_num is not null';

exec sp_executesql @insertSql;
end
else 
begin
set @updateSql = ' UPDATE observation_fact  set 
			 		valtype_cd = temp.valtype_cd,
                    tval_char = temp.tval_char,
                    nval_num = temp.nval_num ,
                    valueflag_cd = temp.valueflag_cd,
                    quantity_num = temp.quantity_num,
                    confidence_num = temp.confidence_num ,
                    observation_blob = temp.observation_blob,
                    units_cd = temp.units_cd,
                    end_date = temp.end_date,
                    location_cd = temp.location_cd,
                    update_date= temp.update_date,
                    download_date = temp.download_date,
                    import_date = getdate(),
                    sourcesystem_cd = temp.sourcesystem_cd,
					UPLOAD_ID = '+ convert(nvarchar,@upload_id)+ '
					from observation_fact obsfact 
                    inner join ' + @upload_temptable_name + ' temp
                    on  obsfact.encounter_num = temp.encounter_num 
				    and obsfact.patient_num = temp.patient_num
                    and obsfact.concept_cd = temp.concept_cd
					and obsfact.start_date = temp.start_date
		            and obsfact.provider_id = temp.provider_id
			 		and obsfact.modifier_cd = temp.modifier_cd
					and obsfact.instance_num = temp.instance_num
                    where isnull(obsfact.update_date,0) <= isnull(temp.update_date,0)';

exec sp_executesql @updateSql;

set @insertSql = 'insert into observation_fact(encounter_num,
	patient_num,concept_cd,provider_id,start_date,modifier_cd,instance_num,valtype_cd,tval_char,
	nval_num,valueflag_cd,quantity_num,units_cd,end_date,location_cd ,confidence_num,observation_blob,
	update_date,download_date,import_date,sourcesystem_cd,upload_id)' + 
    ' select  temp.encounter_num, temp.patient_num,temp.concept_cd,temp.provider_id,temp.start_date,temp.modifier_cd,temp.instance_num,temp.valtype_cd,temp.tval_char,
	temp.nval_num,temp.valueflag_cd,temp.quantity_num,temp.units_cd,temp.end_date,temp.location_cd,temp.confidence_num,temp.observation_blob,
	temp.update_date,temp.download_date,getdate(),temp.sourcesystem_cd,'+ convert(nvarchar,@upload_id) + ' from  ' + @upload_temptable_name +  ' temp ' +
					' where temp.patient_num is not null and  temp.encounter_num is not null and not exists (select obsfact.concept_cd from observation_fact obsfact where ' + 
				    ' obsfact.encounter_num = temp.encounter_num 
				      and obsfact.patient_num = temp.patient_num
                      and obsfact.concept_cd = temp.concept_cd
					  and obsfact.start_date = temp.start_date
		              and obsfact.provider_id = temp.provider_id
			 		  and obsfact.modifier_cd = temp.modifier_cd
					  and obsfact.instance_num = temp.instance_num
					) ';

exec sp_executesql @insertSql;
end;

 COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(4000), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1); 
 END CATCH


END;
 
GO
/****** Object:  StoredProcedure [dbo].[UPDATE_QUERYINSTANCE_MESSAGE]    Script Date: 1/21/2022 1:32:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[UPDATE_QUERYINSTANCE_MESSAGE] (@message  varchar(MAX), @instanceId int , @errorMsg varchar(MAX) = NULL OUTPUT) as 
begin 

BEGIN TRY
BEGIN TRANSACTION

update qt_query_instance set message = @message where query_instance_id = @instanceId

 COMMIT
 END TRY 
 BEGIN CATCH
   if @@TRANCOUNT > 0 
      ROLLBACK
   declare @errMsg nvarchar(MAX), @errSeverity int
   select @errMsg = ERROR_MESSAGE(), @errSeverity = ERROR_SEVERITY();
   set @errorMsg = @errMsg;
   RAISERROR(@errMsg,@errSeverity,1);
 END CATCH
end
GO
